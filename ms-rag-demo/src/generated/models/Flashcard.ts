
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Flashcard` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Flashcard
 * 
 */
export type FlashcardModel = runtime.Types.Result.DefaultSelection<Prisma.$FlashcardPayload>

export type AggregateFlashcard = {
  _count: FlashcardCountAggregateOutputType | null
  _min: FlashcardMinAggregateOutputType | null
  _max: FlashcardMaxAggregateOutputType | null
}

export type FlashcardMinAggregateOutputType = {
  id: string | null
  documentId: string | null
  userId: string | null
  question: string | null
  answer: string | null
  createdAt: Date | null
}

export type FlashcardMaxAggregateOutputType = {
  id: string | null
  documentId: string | null
  userId: string | null
  question: string | null
  answer: string | null
  createdAt: Date | null
}

export type FlashcardCountAggregateOutputType = {
  id: number
  documentId: number
  userId: number
  question: number
  answer: number
  createdAt: number
  _all: number
}


export type FlashcardMinAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
  question?: true
  answer?: true
  createdAt?: true
}

export type FlashcardMaxAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
  question?: true
  answer?: true
  createdAt?: true
}

export type FlashcardCountAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
  question?: true
  answer?: true
  createdAt?: true
  _all?: true
}

export type FlashcardAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Flashcard to aggregate.
   */
  where?: Prisma.FlashcardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Flashcards to fetch.
   */
  orderBy?: Prisma.FlashcardOrderByWithRelationInput | Prisma.FlashcardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FlashcardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Flashcards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Flashcards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Flashcards
  **/
  _count?: true | FlashcardCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FlashcardMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FlashcardMaxAggregateInputType
}

export type GetFlashcardAggregateType<T extends FlashcardAggregateArgs> = {
      [P in keyof T & keyof AggregateFlashcard]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFlashcard[P]>
    : Prisma.GetScalarType<T[P], AggregateFlashcard[P]>
}




export type FlashcardGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FlashcardWhereInput
  orderBy?: Prisma.FlashcardOrderByWithAggregationInput | Prisma.FlashcardOrderByWithAggregationInput[]
  by: Prisma.FlashcardScalarFieldEnum[] | Prisma.FlashcardScalarFieldEnum
  having?: Prisma.FlashcardScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FlashcardCountAggregateInputType | true
  _min?: FlashcardMinAggregateInputType
  _max?: FlashcardMaxAggregateInputType
}

export type FlashcardGroupByOutputType = {
  id: string
  documentId: string
  userId: string
  question: string
  answer: string
  createdAt: Date
  _count: FlashcardCountAggregateOutputType | null
  _min: FlashcardMinAggregateOutputType | null
  _max: FlashcardMaxAggregateOutputType | null
}

type GetFlashcardGroupByPayload<T extends FlashcardGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FlashcardGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FlashcardGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FlashcardGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FlashcardGroupByOutputType[P]>
      }
    >
  >



export type FlashcardWhereInput = {
  AND?: Prisma.FlashcardWhereInput | Prisma.FlashcardWhereInput[]
  OR?: Prisma.FlashcardWhereInput[]
  NOT?: Prisma.FlashcardWhereInput | Prisma.FlashcardWhereInput[]
  id?: Prisma.StringFilter<"Flashcard"> | string
  documentId?: Prisma.StringFilter<"Flashcard"> | string
  userId?: Prisma.StringFilter<"Flashcard"> | string
  question?: Prisma.StringFilter<"Flashcard"> | string
  answer?: Prisma.StringFilter<"Flashcard"> | string
  createdAt?: Prisma.DateTimeFilter<"Flashcard"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type FlashcardOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  document?: Prisma.DocumentOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type FlashcardWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FlashcardWhereInput | Prisma.FlashcardWhereInput[]
  OR?: Prisma.FlashcardWhereInput[]
  NOT?: Prisma.FlashcardWhereInput | Prisma.FlashcardWhereInput[]
  documentId?: Prisma.StringFilter<"Flashcard"> | string
  userId?: Prisma.StringFilter<"Flashcard"> | string
  question?: Prisma.StringFilter<"Flashcard"> | string
  answer?: Prisma.StringFilter<"Flashcard"> | string
  createdAt?: Prisma.DateTimeFilter<"Flashcard"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type FlashcardOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.FlashcardCountOrderByAggregateInput
  _max?: Prisma.FlashcardMaxOrderByAggregateInput
  _min?: Prisma.FlashcardMinOrderByAggregateInput
}

export type FlashcardScalarWhereWithAggregatesInput = {
  AND?: Prisma.FlashcardScalarWhereWithAggregatesInput | Prisma.FlashcardScalarWhereWithAggregatesInput[]
  OR?: Prisma.FlashcardScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FlashcardScalarWhereWithAggregatesInput | Prisma.FlashcardScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Flashcard"> | string
  documentId?: Prisma.StringWithAggregatesFilter<"Flashcard"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Flashcard"> | string
  question?: Prisma.StringWithAggregatesFilter<"Flashcard"> | string
  answer?: Prisma.StringWithAggregatesFilter<"Flashcard"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Flashcard"> | Date | string
}

export type FlashcardCreateInput = {
  id?: string
  question: string
  answer: string
  createdAt?: Date | string
  document: Prisma.DocumentCreateNestedOneWithoutFlashcardsInput
  user: Prisma.UserCreateNestedOneWithoutFlashcardsInput
}

export type FlashcardUncheckedCreateInput = {
  id?: string
  documentId: string
  userId: string
  question: string
  answer: string
  createdAt?: Date | string
}

export type FlashcardUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutFlashcardsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutFlashcardsNestedInput
}

export type FlashcardUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FlashcardCreateManyInput = {
  id?: string
  documentId: string
  userId: string
  question: string
  answer: string
  createdAt?: Date | string
}

export type FlashcardUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FlashcardUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FlashcardListRelationFilter = {
  every?: Prisma.FlashcardWhereInput
  some?: Prisma.FlashcardWhereInput
  none?: Prisma.FlashcardWhereInput
}

export type FlashcardOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FlashcardCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FlashcardMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FlashcardMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  answer?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FlashcardCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutUserInput, Prisma.FlashcardUncheckedCreateWithoutUserInput> | Prisma.FlashcardCreateWithoutUserInput[] | Prisma.FlashcardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutUserInput | Prisma.FlashcardCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FlashcardCreateManyUserInputEnvelope
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
}

export type FlashcardUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutUserInput, Prisma.FlashcardUncheckedCreateWithoutUserInput> | Prisma.FlashcardCreateWithoutUserInput[] | Prisma.FlashcardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutUserInput | Prisma.FlashcardCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FlashcardCreateManyUserInputEnvelope
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
}

export type FlashcardUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutUserInput, Prisma.FlashcardUncheckedCreateWithoutUserInput> | Prisma.FlashcardCreateWithoutUserInput[] | Prisma.FlashcardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutUserInput | Prisma.FlashcardCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.FlashcardUpsertWithWhereUniqueWithoutUserInput | Prisma.FlashcardUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FlashcardCreateManyUserInputEnvelope
  set?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  disconnect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  delete?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  update?: Prisma.FlashcardUpdateWithWhereUniqueWithoutUserInput | Prisma.FlashcardUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.FlashcardUpdateManyWithWhereWithoutUserInput | Prisma.FlashcardUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.FlashcardScalarWhereInput | Prisma.FlashcardScalarWhereInput[]
}

export type FlashcardUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutUserInput, Prisma.FlashcardUncheckedCreateWithoutUserInput> | Prisma.FlashcardCreateWithoutUserInput[] | Prisma.FlashcardUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutUserInput | Prisma.FlashcardCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.FlashcardUpsertWithWhereUniqueWithoutUserInput | Prisma.FlashcardUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FlashcardCreateManyUserInputEnvelope
  set?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  disconnect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  delete?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  update?: Prisma.FlashcardUpdateWithWhereUniqueWithoutUserInput | Prisma.FlashcardUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.FlashcardUpdateManyWithWhereWithoutUserInput | Prisma.FlashcardUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.FlashcardScalarWhereInput | Prisma.FlashcardScalarWhereInput[]
}

export type FlashcardCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutDocumentInput, Prisma.FlashcardUncheckedCreateWithoutDocumentInput> | Prisma.FlashcardCreateWithoutDocumentInput[] | Prisma.FlashcardUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutDocumentInput | Prisma.FlashcardCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.FlashcardCreateManyDocumentInputEnvelope
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
}

export type FlashcardUncheckedCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutDocumentInput, Prisma.FlashcardUncheckedCreateWithoutDocumentInput> | Prisma.FlashcardCreateWithoutDocumentInput[] | Prisma.FlashcardUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutDocumentInput | Prisma.FlashcardCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.FlashcardCreateManyDocumentInputEnvelope
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
}

export type FlashcardUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutDocumentInput, Prisma.FlashcardUncheckedCreateWithoutDocumentInput> | Prisma.FlashcardCreateWithoutDocumentInput[] | Prisma.FlashcardUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutDocumentInput | Prisma.FlashcardCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.FlashcardUpsertWithWhereUniqueWithoutDocumentInput | Prisma.FlashcardUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.FlashcardCreateManyDocumentInputEnvelope
  set?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  disconnect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  delete?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  update?: Prisma.FlashcardUpdateWithWhereUniqueWithoutDocumentInput | Prisma.FlashcardUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.FlashcardUpdateManyWithWhereWithoutDocumentInput | Prisma.FlashcardUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.FlashcardScalarWhereInput | Prisma.FlashcardScalarWhereInput[]
}

export type FlashcardUncheckedUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.FlashcardCreateWithoutDocumentInput, Prisma.FlashcardUncheckedCreateWithoutDocumentInput> | Prisma.FlashcardCreateWithoutDocumentInput[] | Prisma.FlashcardUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.FlashcardCreateOrConnectWithoutDocumentInput | Prisma.FlashcardCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.FlashcardUpsertWithWhereUniqueWithoutDocumentInput | Prisma.FlashcardUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.FlashcardCreateManyDocumentInputEnvelope
  set?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  disconnect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  delete?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  connect?: Prisma.FlashcardWhereUniqueInput | Prisma.FlashcardWhereUniqueInput[]
  update?: Prisma.FlashcardUpdateWithWhereUniqueWithoutDocumentInput | Prisma.FlashcardUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.FlashcardUpdateManyWithWhereWithoutDocumentInput | Prisma.FlashcardUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.FlashcardScalarWhereInput | Prisma.FlashcardScalarWhereInput[]
}

export type FlashcardCreateWithoutUserInput = {
  id?: string
  question: string
  answer: string
  createdAt?: Date | string
  document: Prisma.DocumentCreateNestedOneWithoutFlashcardsInput
}

export type FlashcardUncheckedCreateWithoutUserInput = {
  id?: string
  documentId: string
  question: string
  answer: string
  createdAt?: Date | string
}

export type FlashcardCreateOrConnectWithoutUserInput = {
  where: Prisma.FlashcardWhereUniqueInput
  create: Prisma.XOR<Prisma.FlashcardCreateWithoutUserInput, Prisma.FlashcardUncheckedCreateWithoutUserInput>
}

export type FlashcardCreateManyUserInputEnvelope = {
  data: Prisma.FlashcardCreateManyUserInput | Prisma.FlashcardCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type FlashcardUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.FlashcardWhereUniqueInput
  update: Prisma.XOR<Prisma.FlashcardUpdateWithoutUserInput, Prisma.FlashcardUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.FlashcardCreateWithoutUserInput, Prisma.FlashcardUncheckedCreateWithoutUserInput>
}

export type FlashcardUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.FlashcardWhereUniqueInput
  data: Prisma.XOR<Prisma.FlashcardUpdateWithoutUserInput, Prisma.FlashcardUncheckedUpdateWithoutUserInput>
}

export type FlashcardUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.FlashcardScalarWhereInput
  data: Prisma.XOR<Prisma.FlashcardUpdateManyMutationInput, Prisma.FlashcardUncheckedUpdateManyWithoutUserInput>
}

export type FlashcardScalarWhereInput = {
  AND?: Prisma.FlashcardScalarWhereInput | Prisma.FlashcardScalarWhereInput[]
  OR?: Prisma.FlashcardScalarWhereInput[]
  NOT?: Prisma.FlashcardScalarWhereInput | Prisma.FlashcardScalarWhereInput[]
  id?: Prisma.StringFilter<"Flashcard"> | string
  documentId?: Prisma.StringFilter<"Flashcard"> | string
  userId?: Prisma.StringFilter<"Flashcard"> | string
  question?: Prisma.StringFilter<"Flashcard"> | string
  answer?: Prisma.StringFilter<"Flashcard"> | string
  createdAt?: Prisma.DateTimeFilter<"Flashcard"> | Date | string
}

export type FlashcardCreateWithoutDocumentInput = {
  id?: string
  question: string
  answer: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFlashcardsInput
}

export type FlashcardUncheckedCreateWithoutDocumentInput = {
  id?: string
  userId: string
  question: string
  answer: string
  createdAt?: Date | string
}

export type FlashcardCreateOrConnectWithoutDocumentInput = {
  where: Prisma.FlashcardWhereUniqueInput
  create: Prisma.XOR<Prisma.FlashcardCreateWithoutDocumentInput, Prisma.FlashcardUncheckedCreateWithoutDocumentInput>
}

export type FlashcardCreateManyDocumentInputEnvelope = {
  data: Prisma.FlashcardCreateManyDocumentInput | Prisma.FlashcardCreateManyDocumentInput[]
  skipDuplicates?: boolean
}

export type FlashcardUpsertWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.FlashcardWhereUniqueInput
  update: Prisma.XOR<Prisma.FlashcardUpdateWithoutDocumentInput, Prisma.FlashcardUncheckedUpdateWithoutDocumentInput>
  create: Prisma.XOR<Prisma.FlashcardCreateWithoutDocumentInput, Prisma.FlashcardUncheckedCreateWithoutDocumentInput>
}

export type FlashcardUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.FlashcardWhereUniqueInput
  data: Prisma.XOR<Prisma.FlashcardUpdateWithoutDocumentInput, Prisma.FlashcardUncheckedUpdateWithoutDocumentInput>
}

export type FlashcardUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.FlashcardScalarWhereInput
  data: Prisma.XOR<Prisma.FlashcardUpdateManyMutationInput, Prisma.FlashcardUncheckedUpdateManyWithoutDocumentInput>
}

export type FlashcardCreateManyUserInput = {
  id?: string
  documentId: string
  question: string
  answer: string
  createdAt?: Date | string
}

export type FlashcardUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutFlashcardsNestedInput
}

export type FlashcardUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FlashcardUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FlashcardCreateManyDocumentInput = {
  id?: string
  userId: string
  question: string
  answer: string
  createdAt?: Date | string
}

export type FlashcardUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFlashcardsNestedInput
}

export type FlashcardUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FlashcardUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  answer?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FlashcardSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  userId?: boolean
  question?: boolean
  answer?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["flashcard"]>

export type FlashcardSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  userId?: boolean
  question?: boolean
  answer?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["flashcard"]>

export type FlashcardSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  userId?: boolean
  question?: boolean
  answer?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["flashcard"]>

export type FlashcardSelectScalar = {
  id?: boolean
  documentId?: boolean
  userId?: boolean
  question?: boolean
  answer?: boolean
  createdAt?: boolean
}

export type FlashcardOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "documentId" | "userId" | "question" | "answer" | "createdAt", ExtArgs["result"]["flashcard"]>
export type FlashcardInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FlashcardIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type FlashcardIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $FlashcardPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Flashcard"
  objects: {
    document: Prisma.$DocumentPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    documentId: string
    userId: string
    question: string
    answer: string
    createdAt: Date
  }, ExtArgs["result"]["flashcard"]>
  composites: {}
}

export type FlashcardGetPayload<S extends boolean | null | undefined | FlashcardDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FlashcardPayload, S>

export type FlashcardCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FlashcardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FlashcardCountAggregateInputType | true
  }

export interface FlashcardDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Flashcard'], meta: { name: 'Flashcard' } }
  /**
   * Find zero or one Flashcard that matches the filter.
   * @param {FlashcardFindUniqueArgs} args - Arguments to find a Flashcard
   * @example
   * // Get one Flashcard
   * const flashcard = await prisma.flashcard.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FlashcardFindUniqueArgs>(args: Prisma.SelectSubset<T, FlashcardFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Flashcard that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FlashcardFindUniqueOrThrowArgs} args - Arguments to find a Flashcard
   * @example
   * // Get one Flashcard
   * const flashcard = await prisma.flashcard.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FlashcardFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FlashcardFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Flashcard that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlashcardFindFirstArgs} args - Arguments to find a Flashcard
   * @example
   * // Get one Flashcard
   * const flashcard = await prisma.flashcard.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FlashcardFindFirstArgs>(args?: Prisma.SelectSubset<T, FlashcardFindFirstArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Flashcard that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlashcardFindFirstOrThrowArgs} args - Arguments to find a Flashcard
   * @example
   * // Get one Flashcard
   * const flashcard = await prisma.flashcard.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FlashcardFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FlashcardFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Flashcards that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlashcardFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Flashcards
   * const flashcards = await prisma.flashcard.findMany()
   * 
   * // Get first 10 Flashcards
   * const flashcards = await prisma.flashcard.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const flashcardWithIdOnly = await prisma.flashcard.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FlashcardFindManyArgs>(args?: Prisma.SelectSubset<T, FlashcardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Flashcard.
   * @param {FlashcardCreateArgs} args - Arguments to create a Flashcard.
   * @example
   * // Create one Flashcard
   * const Flashcard = await prisma.flashcard.create({
   *   data: {
   *     // ... data to create a Flashcard
   *   }
   * })
   * 
   */
  create<T extends FlashcardCreateArgs>(args: Prisma.SelectSubset<T, FlashcardCreateArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Flashcards.
   * @param {FlashcardCreateManyArgs} args - Arguments to create many Flashcards.
   * @example
   * // Create many Flashcards
   * const flashcard = await prisma.flashcard.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FlashcardCreateManyArgs>(args?: Prisma.SelectSubset<T, FlashcardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Flashcards and returns the data saved in the database.
   * @param {FlashcardCreateManyAndReturnArgs} args - Arguments to create many Flashcards.
   * @example
   * // Create many Flashcards
   * const flashcard = await prisma.flashcard.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Flashcards and only return the `id`
   * const flashcardWithIdOnly = await prisma.flashcard.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FlashcardCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FlashcardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Flashcard.
   * @param {FlashcardDeleteArgs} args - Arguments to delete one Flashcard.
   * @example
   * // Delete one Flashcard
   * const Flashcard = await prisma.flashcard.delete({
   *   where: {
   *     // ... filter to delete one Flashcard
   *   }
   * })
   * 
   */
  delete<T extends FlashcardDeleteArgs>(args: Prisma.SelectSubset<T, FlashcardDeleteArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Flashcard.
   * @param {FlashcardUpdateArgs} args - Arguments to update one Flashcard.
   * @example
   * // Update one Flashcard
   * const flashcard = await prisma.flashcard.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FlashcardUpdateArgs>(args: Prisma.SelectSubset<T, FlashcardUpdateArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Flashcards.
   * @param {FlashcardDeleteManyArgs} args - Arguments to filter Flashcards to delete.
   * @example
   * // Delete a few Flashcards
   * const { count } = await prisma.flashcard.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FlashcardDeleteManyArgs>(args?: Prisma.SelectSubset<T, FlashcardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Flashcards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlashcardUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Flashcards
   * const flashcard = await prisma.flashcard.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FlashcardUpdateManyArgs>(args: Prisma.SelectSubset<T, FlashcardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Flashcards and returns the data updated in the database.
   * @param {FlashcardUpdateManyAndReturnArgs} args - Arguments to update many Flashcards.
   * @example
   * // Update many Flashcards
   * const flashcard = await prisma.flashcard.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Flashcards and only return the `id`
   * const flashcardWithIdOnly = await prisma.flashcard.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FlashcardUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FlashcardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Flashcard.
   * @param {FlashcardUpsertArgs} args - Arguments to update or create a Flashcard.
   * @example
   * // Update or create a Flashcard
   * const flashcard = await prisma.flashcard.upsert({
   *   create: {
   *     // ... data to create a Flashcard
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Flashcard we want to update
   *   }
   * })
   */
  upsert<T extends FlashcardUpsertArgs>(args: Prisma.SelectSubset<T, FlashcardUpsertArgs<ExtArgs>>): Prisma.Prisma__FlashcardClient<runtime.Types.Result.GetResult<Prisma.$FlashcardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Flashcards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlashcardCountArgs} args - Arguments to filter Flashcards to count.
   * @example
   * // Count the number of Flashcards
   * const count = await prisma.flashcard.count({
   *   where: {
   *     // ... the filter for the Flashcards we want to count
   *   }
   * })
  **/
  count<T extends FlashcardCountArgs>(
    args?: Prisma.Subset<T, FlashcardCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FlashcardCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Flashcard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlashcardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FlashcardAggregateArgs>(args: Prisma.Subset<T, FlashcardAggregateArgs>): Prisma.PrismaPromise<GetFlashcardAggregateType<T>>

  /**
   * Group by Flashcard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlashcardGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FlashcardGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FlashcardGroupByArgs['orderBy'] }
      : { orderBy?: FlashcardGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FlashcardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlashcardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Flashcard model
 */
readonly fields: FlashcardFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Flashcard.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FlashcardClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Flashcard model
 */
export interface FlashcardFieldRefs {
  readonly id: Prisma.FieldRef<"Flashcard", 'String'>
  readonly documentId: Prisma.FieldRef<"Flashcard", 'String'>
  readonly userId: Prisma.FieldRef<"Flashcard", 'String'>
  readonly question: Prisma.FieldRef<"Flashcard", 'String'>
  readonly answer: Prisma.FieldRef<"Flashcard", 'String'>
  readonly createdAt: Prisma.FieldRef<"Flashcard", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Flashcard findUnique
 */
export type FlashcardFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * Filter, which Flashcard to fetch.
   */
  where: Prisma.FlashcardWhereUniqueInput
}

/**
 * Flashcard findUniqueOrThrow
 */
export type FlashcardFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * Filter, which Flashcard to fetch.
   */
  where: Prisma.FlashcardWhereUniqueInput
}

/**
 * Flashcard findFirst
 */
export type FlashcardFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * Filter, which Flashcard to fetch.
   */
  where?: Prisma.FlashcardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Flashcards to fetch.
   */
  orderBy?: Prisma.FlashcardOrderByWithRelationInput | Prisma.FlashcardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Flashcards.
   */
  cursor?: Prisma.FlashcardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Flashcards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Flashcards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Flashcards.
   */
  distinct?: Prisma.FlashcardScalarFieldEnum | Prisma.FlashcardScalarFieldEnum[]
}

/**
 * Flashcard findFirstOrThrow
 */
export type FlashcardFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * Filter, which Flashcard to fetch.
   */
  where?: Prisma.FlashcardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Flashcards to fetch.
   */
  orderBy?: Prisma.FlashcardOrderByWithRelationInput | Prisma.FlashcardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Flashcards.
   */
  cursor?: Prisma.FlashcardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Flashcards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Flashcards.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Flashcards.
   */
  distinct?: Prisma.FlashcardScalarFieldEnum | Prisma.FlashcardScalarFieldEnum[]
}

/**
 * Flashcard findMany
 */
export type FlashcardFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * Filter, which Flashcards to fetch.
   */
  where?: Prisma.FlashcardWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Flashcards to fetch.
   */
  orderBy?: Prisma.FlashcardOrderByWithRelationInput | Prisma.FlashcardOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Flashcards.
   */
  cursor?: Prisma.FlashcardWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Flashcards from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Flashcards.
   */
  skip?: number
  distinct?: Prisma.FlashcardScalarFieldEnum | Prisma.FlashcardScalarFieldEnum[]
}

/**
 * Flashcard create
 */
export type FlashcardCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * The data needed to create a Flashcard.
   */
  data: Prisma.XOR<Prisma.FlashcardCreateInput, Prisma.FlashcardUncheckedCreateInput>
}

/**
 * Flashcard createMany
 */
export type FlashcardCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Flashcards.
   */
  data: Prisma.FlashcardCreateManyInput | Prisma.FlashcardCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Flashcard createManyAndReturn
 */
export type FlashcardCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * The data used to create many Flashcards.
   */
  data: Prisma.FlashcardCreateManyInput | Prisma.FlashcardCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Flashcard update
 */
export type FlashcardUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * The data needed to update a Flashcard.
   */
  data: Prisma.XOR<Prisma.FlashcardUpdateInput, Prisma.FlashcardUncheckedUpdateInput>
  /**
   * Choose, which Flashcard to update.
   */
  where: Prisma.FlashcardWhereUniqueInput
}

/**
 * Flashcard updateMany
 */
export type FlashcardUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Flashcards.
   */
  data: Prisma.XOR<Prisma.FlashcardUpdateManyMutationInput, Prisma.FlashcardUncheckedUpdateManyInput>
  /**
   * Filter which Flashcards to update
   */
  where?: Prisma.FlashcardWhereInput
  /**
   * Limit how many Flashcards to update.
   */
  limit?: number
}

/**
 * Flashcard updateManyAndReturn
 */
export type FlashcardUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * The data used to update Flashcards.
   */
  data: Prisma.XOR<Prisma.FlashcardUpdateManyMutationInput, Prisma.FlashcardUncheckedUpdateManyInput>
  /**
   * Filter which Flashcards to update
   */
  where?: Prisma.FlashcardWhereInput
  /**
   * Limit how many Flashcards to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Flashcard upsert
 */
export type FlashcardUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * The filter to search for the Flashcard to update in case it exists.
   */
  where: Prisma.FlashcardWhereUniqueInput
  /**
   * In case the Flashcard found by the `where` argument doesn't exist, create a new Flashcard with this data.
   */
  create: Prisma.XOR<Prisma.FlashcardCreateInput, Prisma.FlashcardUncheckedCreateInput>
  /**
   * In case the Flashcard was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FlashcardUpdateInput, Prisma.FlashcardUncheckedUpdateInput>
}

/**
 * Flashcard delete
 */
export type FlashcardDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
  /**
   * Filter which Flashcard to delete.
   */
  where: Prisma.FlashcardWhereUniqueInput
}

/**
 * Flashcard deleteMany
 */
export type FlashcardDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Flashcards to delete
   */
  where?: Prisma.FlashcardWhereInput
  /**
   * Limit how many Flashcards to delete.
   */
  limit?: number
}

/**
 * Flashcard without action
 */
export type FlashcardDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Flashcard
   */
  select?: Prisma.FlashcardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Flashcard
   */
  omit?: Prisma.FlashcardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FlashcardInclude<ExtArgs> | null
}
