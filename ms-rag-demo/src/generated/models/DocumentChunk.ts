
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DocumentChunk` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DocumentChunk
 * 
 */
export type DocumentChunkModel = runtime.Types.Result.DefaultSelection<Prisma.$DocumentChunkPayload>

export type AggregateDocumentChunk = {
  _count: DocumentChunkCountAggregateOutputType | null
  _min: DocumentChunkMinAggregateOutputType | null
  _max: DocumentChunkMaxAggregateOutputType | null
}

export type DocumentChunkMinAggregateOutputType = {
  id: string | null
  documentId: string | null
  content: string | null
  createdAt: Date | null
}

export type DocumentChunkMaxAggregateOutputType = {
  id: string | null
  documentId: string | null
  content: string | null
  createdAt: Date | null
}

export type DocumentChunkCountAggregateOutputType = {
  id: number
  documentId: number
  content: number
  createdAt: number
  _all: number
}


export type DocumentChunkMinAggregateInputType = {
  id?: true
  documentId?: true
  content?: true
  createdAt?: true
}

export type DocumentChunkMaxAggregateInputType = {
  id?: true
  documentId?: true
  content?: true
  createdAt?: true
}

export type DocumentChunkCountAggregateInputType = {
  id?: true
  documentId?: true
  content?: true
  createdAt?: true
  _all?: true
}

export type DocumentChunkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentChunk to aggregate.
   */
  where?: Prisma.DocumentChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentChunks to fetch.
   */
  orderBy?: Prisma.DocumentChunkOrderByWithRelationInput | Prisma.DocumentChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DocumentChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentChunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DocumentChunks
  **/
  _count?: true | DocumentChunkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DocumentChunkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DocumentChunkMaxAggregateInputType
}

export type GetDocumentChunkAggregateType<T extends DocumentChunkAggregateArgs> = {
      [P in keyof T & keyof AggregateDocumentChunk]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocumentChunk[P]>
    : Prisma.GetScalarType<T[P], AggregateDocumentChunk[P]>
}




export type DocumentChunkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentChunkWhereInput
  orderBy?: Prisma.DocumentChunkOrderByWithAggregationInput | Prisma.DocumentChunkOrderByWithAggregationInput[]
  by: Prisma.DocumentChunkScalarFieldEnum[] | Prisma.DocumentChunkScalarFieldEnum
  having?: Prisma.DocumentChunkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DocumentChunkCountAggregateInputType | true
  _min?: DocumentChunkMinAggregateInputType
  _max?: DocumentChunkMaxAggregateInputType
}

export type DocumentChunkGroupByOutputType = {
  id: string
  documentId: string
  content: string
  createdAt: Date
  _count: DocumentChunkCountAggregateOutputType | null
  _min: DocumentChunkMinAggregateOutputType | null
  _max: DocumentChunkMaxAggregateOutputType | null
}

type GetDocumentChunkGroupByPayload<T extends DocumentChunkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DocumentChunkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DocumentChunkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentChunkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentChunkGroupByOutputType[P]>
      }
    >
  >



export type DocumentChunkWhereInput = {
  AND?: Prisma.DocumentChunkWhereInput | Prisma.DocumentChunkWhereInput[]
  OR?: Prisma.DocumentChunkWhereInput[]
  NOT?: Prisma.DocumentChunkWhereInput | Prisma.DocumentChunkWhereInput[]
  id?: Prisma.StringFilter<"DocumentChunk"> | string
  documentId?: Prisma.StringFilter<"DocumentChunk"> | string
  content?: Prisma.StringFilter<"DocumentChunk"> | string
  createdAt?: Prisma.DateTimeFilter<"DocumentChunk"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}

export type DocumentChunkOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  document?: Prisma.DocumentOrderByWithRelationInput
}

export type DocumentChunkWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DocumentChunkWhereInput | Prisma.DocumentChunkWhereInput[]
  OR?: Prisma.DocumentChunkWhereInput[]
  NOT?: Prisma.DocumentChunkWhereInput | Prisma.DocumentChunkWhereInput[]
  documentId?: Prisma.StringFilter<"DocumentChunk"> | string
  content?: Prisma.StringFilter<"DocumentChunk"> | string
  createdAt?: Prisma.DateTimeFilter<"DocumentChunk"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}, "id">

export type DocumentChunkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.DocumentChunkCountOrderByAggregateInput
  _max?: Prisma.DocumentChunkMaxOrderByAggregateInput
  _min?: Prisma.DocumentChunkMinOrderByAggregateInput
}

export type DocumentChunkScalarWhereWithAggregatesInput = {
  AND?: Prisma.DocumentChunkScalarWhereWithAggregatesInput | Prisma.DocumentChunkScalarWhereWithAggregatesInput[]
  OR?: Prisma.DocumentChunkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DocumentChunkScalarWhereWithAggregatesInput | Prisma.DocumentChunkScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DocumentChunk"> | string
  documentId?: Prisma.StringWithAggregatesFilter<"DocumentChunk"> | string
  content?: Prisma.StringWithAggregatesFilter<"DocumentChunk"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DocumentChunk"> | Date | string
}

export type DocumentChunkUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutChunksNestedInput
}

export type DocumentChunkUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentChunkUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentChunkUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentChunkListRelationFilter = {
  every?: Prisma.DocumentChunkWhereInput
  some?: Prisma.DocumentChunkWhereInput
  none?: Prisma.DocumentChunkWhereInput
}

export type DocumentChunkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DocumentChunkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DocumentChunkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DocumentChunkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DocumentChunkCreateNestedManyWithoutDocumentInput = {
  connect?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
}

export type DocumentChunkUncheckedCreateNestedManyWithoutDocumentInput = {
  connect?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
}

export type DocumentChunkUpdateManyWithoutDocumentNestedInput = {
  set?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  disconnect?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  delete?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  connect?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  update?: Prisma.DocumentChunkUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentChunkUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentChunkUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentChunkUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentChunkScalarWhereInput | Prisma.DocumentChunkScalarWhereInput[]
}

export type DocumentChunkUncheckedUpdateManyWithoutDocumentNestedInput = {
  set?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  disconnect?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  delete?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  connect?: Prisma.DocumentChunkWhereUniqueInput | Prisma.DocumentChunkWhereUniqueInput[]
  update?: Prisma.DocumentChunkUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentChunkUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentChunkUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentChunkUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentChunkScalarWhereInput | Prisma.DocumentChunkScalarWhereInput[]
}

export type DocumentChunkUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.DocumentChunkWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentChunkUpdateWithoutDocumentInput, Prisma.DocumentChunkUncheckedUpdateWithoutDocumentInput>
}

export type DocumentChunkUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.DocumentChunkScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentChunkUpdateManyMutationInput, Prisma.DocumentChunkUncheckedUpdateManyWithoutDocumentInput>
}

export type DocumentChunkScalarWhereInput = {
  AND?: Prisma.DocumentChunkScalarWhereInput | Prisma.DocumentChunkScalarWhereInput[]
  OR?: Prisma.DocumentChunkScalarWhereInput[]
  NOT?: Prisma.DocumentChunkScalarWhereInput | Prisma.DocumentChunkScalarWhereInput[]
  id?: Prisma.StringFilter<"DocumentChunk"> | string
  documentId?: Prisma.StringFilter<"DocumentChunk"> | string
  content?: Prisma.StringFilter<"DocumentChunk"> | string
  createdAt?: Prisma.DateTimeFilter<"DocumentChunk"> | Date | string
}

export type DocumentChunkUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentChunkUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentChunkUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DocumentChunkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  content?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentChunk"]>


export type DocumentChunkSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  content?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentChunk"]>

export type DocumentChunkSelectScalar = {
  id?: boolean
  documentId?: boolean
  content?: boolean
  createdAt?: boolean
}

export type DocumentChunkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "documentId" | "content" | "createdAt", ExtArgs["result"]["documentChunk"]>
export type DocumentChunkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type DocumentChunkIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}

export type $DocumentChunkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DocumentChunk"
  objects: {
    document: Prisma.$DocumentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    documentId: string
    content: string
    createdAt: Date
  }, ExtArgs["result"]["documentChunk"]>
  composites: {}
}

export type DocumentChunkGetPayload<S extends boolean | null | undefined | DocumentChunkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload, S>

export type DocumentChunkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DocumentChunkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DocumentChunkCountAggregateInputType | true
  }

export interface DocumentChunkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentChunk'], meta: { name: 'DocumentChunk' } }
  /**
   * Find zero or one DocumentChunk that matches the filter.
   * @param {DocumentChunkFindUniqueArgs} args - Arguments to find a DocumentChunk
   * @example
   * // Get one DocumentChunk
   * const documentChunk = await prisma.documentChunk.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentChunkFindUniqueArgs>(args: Prisma.SelectSubset<T, DocumentChunkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DocumentChunkClient<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DocumentChunk that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentChunkFindUniqueOrThrowArgs} args - Arguments to find a DocumentChunk
   * @example
   * // Get one DocumentChunk
   * const documentChunk = await prisma.documentChunk.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentChunkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DocumentChunkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentChunkClient<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentChunk that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentChunkFindFirstArgs} args - Arguments to find a DocumentChunk
   * @example
   * // Get one DocumentChunk
   * const documentChunk = await prisma.documentChunk.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentChunkFindFirstArgs>(args?: Prisma.SelectSubset<T, DocumentChunkFindFirstArgs<ExtArgs>>): Prisma.Prisma__DocumentChunkClient<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentChunk that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentChunkFindFirstOrThrowArgs} args - Arguments to find a DocumentChunk
   * @example
   * // Get one DocumentChunk
   * const documentChunk = await prisma.documentChunk.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentChunkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DocumentChunkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentChunkClient<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DocumentChunks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentChunkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DocumentChunks
   * const documentChunks = await prisma.documentChunk.findMany()
   * 
   * // Get first 10 DocumentChunks
   * const documentChunks = await prisma.documentChunk.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const documentChunkWithIdOnly = await prisma.documentChunk.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DocumentChunkFindManyArgs>(args?: Prisma.SelectSubset<T, DocumentChunkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Delete a DocumentChunk.
   * @param {DocumentChunkDeleteArgs} args - Arguments to delete one DocumentChunk.
   * @example
   * // Delete one DocumentChunk
   * const DocumentChunk = await prisma.documentChunk.delete({
   *   where: {
   *     // ... filter to delete one DocumentChunk
   *   }
   * })
   * 
   */
  delete<T extends DocumentChunkDeleteArgs>(args: Prisma.SelectSubset<T, DocumentChunkDeleteArgs<ExtArgs>>): Prisma.Prisma__DocumentChunkClient<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DocumentChunk.
   * @param {DocumentChunkUpdateArgs} args - Arguments to update one DocumentChunk.
   * @example
   * // Update one DocumentChunk
   * const documentChunk = await prisma.documentChunk.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DocumentChunkUpdateArgs>(args: Prisma.SelectSubset<T, DocumentChunkUpdateArgs<ExtArgs>>): Prisma.Prisma__DocumentChunkClient<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DocumentChunks.
   * @param {DocumentChunkDeleteManyArgs} args - Arguments to filter DocumentChunks to delete.
   * @example
   * // Delete a few DocumentChunks
   * const { count } = await prisma.documentChunk.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DocumentChunkDeleteManyArgs>(args?: Prisma.SelectSubset<T, DocumentChunkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentChunks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentChunkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DocumentChunks
   * const documentChunk = await prisma.documentChunk.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DocumentChunkUpdateManyArgs>(args: Prisma.SelectSubset<T, DocumentChunkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentChunks and returns the data updated in the database.
   * @param {DocumentChunkUpdateManyAndReturnArgs} args - Arguments to update many DocumentChunks.
   * @example
   * // Update many DocumentChunks
   * const documentChunk = await prisma.documentChunk.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DocumentChunks and only return the `id`
   * const documentChunkWithIdOnly = await prisma.documentChunk.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DocumentChunkUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DocumentChunkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentChunkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>


  /**
   * Count the number of DocumentChunks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentChunkCountArgs} args - Arguments to filter DocumentChunks to count.
   * @example
   * // Count the number of DocumentChunks
   * const count = await prisma.documentChunk.count({
   *   where: {
   *     // ... the filter for the DocumentChunks we want to count
   *   }
   * })
  **/
  count<T extends DocumentChunkCountArgs>(
    args?: Prisma.Subset<T, DocumentChunkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DocumentChunkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DocumentChunk.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentChunkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DocumentChunkAggregateArgs>(args: Prisma.Subset<T, DocumentChunkAggregateArgs>): Prisma.PrismaPromise<GetDocumentChunkAggregateType<T>>

  /**
   * Group by DocumentChunk.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentChunkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DocumentChunkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentChunkGroupByArgs['orderBy'] }
      : { orderBy?: DocumentChunkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DocumentChunkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentChunkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DocumentChunk model
 */
readonly fields: DocumentChunkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DocumentChunk.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentChunkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DocumentChunk model
 */
export interface DocumentChunkFieldRefs {
  readonly id: Prisma.FieldRef<"DocumentChunk", 'String'>
  readonly documentId: Prisma.FieldRef<"DocumentChunk", 'String'>
  readonly content: Prisma.FieldRef<"DocumentChunk", 'String'>
  readonly createdAt: Prisma.FieldRef<"DocumentChunk", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DocumentChunk findUnique
 */
export type DocumentChunkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
  /**
   * Filter, which DocumentChunk to fetch.
   */
  where: Prisma.DocumentChunkWhereUniqueInput
}

/**
 * DocumentChunk findUniqueOrThrow
 */
export type DocumentChunkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
  /**
   * Filter, which DocumentChunk to fetch.
   */
  where: Prisma.DocumentChunkWhereUniqueInput
}

/**
 * DocumentChunk findFirst
 */
export type DocumentChunkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
  /**
   * Filter, which DocumentChunk to fetch.
   */
  where?: Prisma.DocumentChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentChunks to fetch.
   */
  orderBy?: Prisma.DocumentChunkOrderByWithRelationInput | Prisma.DocumentChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentChunks.
   */
  cursor?: Prisma.DocumentChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentChunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentChunks.
   */
  distinct?: Prisma.DocumentChunkScalarFieldEnum | Prisma.DocumentChunkScalarFieldEnum[]
}

/**
 * DocumentChunk findFirstOrThrow
 */
export type DocumentChunkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
  /**
   * Filter, which DocumentChunk to fetch.
   */
  where?: Prisma.DocumentChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentChunks to fetch.
   */
  orderBy?: Prisma.DocumentChunkOrderByWithRelationInput | Prisma.DocumentChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentChunks.
   */
  cursor?: Prisma.DocumentChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentChunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentChunks.
   */
  distinct?: Prisma.DocumentChunkScalarFieldEnum | Prisma.DocumentChunkScalarFieldEnum[]
}

/**
 * DocumentChunk findMany
 */
export type DocumentChunkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
  /**
   * Filter, which DocumentChunks to fetch.
   */
  where?: Prisma.DocumentChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentChunks to fetch.
   */
  orderBy?: Prisma.DocumentChunkOrderByWithRelationInput | Prisma.DocumentChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DocumentChunks.
   */
  cursor?: Prisma.DocumentChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentChunks.
   */
  skip?: number
  distinct?: Prisma.DocumentChunkScalarFieldEnum | Prisma.DocumentChunkScalarFieldEnum[]
}

/**
 * DocumentChunk update
 */
export type DocumentChunkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
  /**
   * The data needed to update a DocumentChunk.
   */
  data: Prisma.XOR<Prisma.DocumentChunkUpdateInput, Prisma.DocumentChunkUncheckedUpdateInput>
  /**
   * Choose, which DocumentChunk to update.
   */
  where: Prisma.DocumentChunkWhereUniqueInput
}

/**
 * DocumentChunk updateMany
 */
export type DocumentChunkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DocumentChunks.
   */
  data: Prisma.XOR<Prisma.DocumentChunkUpdateManyMutationInput, Prisma.DocumentChunkUncheckedUpdateManyInput>
  /**
   * Filter which DocumentChunks to update
   */
  where?: Prisma.DocumentChunkWhereInput
  /**
   * Limit how many DocumentChunks to update.
   */
  limit?: number
}

/**
 * DocumentChunk updateManyAndReturn
 */
export type DocumentChunkUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * The data used to update DocumentChunks.
   */
  data: Prisma.XOR<Prisma.DocumentChunkUpdateManyMutationInput, Prisma.DocumentChunkUncheckedUpdateManyInput>
  /**
   * Filter which DocumentChunks to update
   */
  where?: Prisma.DocumentChunkWhereInput
  /**
   * Limit how many DocumentChunks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentChunk delete
 */
export type DocumentChunkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
  /**
   * Filter which DocumentChunk to delete.
   */
  where: Prisma.DocumentChunkWhereUniqueInput
}

/**
 * DocumentChunk deleteMany
 */
export type DocumentChunkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentChunks to delete
   */
  where?: Prisma.DocumentChunkWhereInput
  /**
   * Limit how many DocumentChunks to delete.
   */
  limit?: number
}

/**
 * DocumentChunk without action
 */
export type DocumentChunkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentChunk
   */
  select?: Prisma.DocumentChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentChunk
   */
  omit?: Prisma.DocumentChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentChunkInclude<ExtArgs> | null
}
