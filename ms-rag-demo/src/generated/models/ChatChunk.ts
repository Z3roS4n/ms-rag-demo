
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ChatChunk` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChatChunk
 * 
 */
export type ChatChunkModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatChunkPayload>

export type AggregateChatChunk = {
  _count: ChatChunkCountAggregateOutputType | null
  _avg: ChatChunkAvgAggregateOutputType | null
  _sum: ChatChunkSumAggregateOutputType | null
  _min: ChatChunkMinAggregateOutputType | null
  _max: ChatChunkMaxAggregateOutputType | null
}

export type ChatChunkAvgAggregateOutputType = {
  chunkIndex: number | null
}

export type ChatChunkSumAggregateOutputType = {
  chunkIndex: number | null
}

export type ChatChunkMinAggregateOutputType = {
  id: string | null
  messageId: string | null
  sessionId: string | null
  documentId: string | null
  userId: string | null
  content: string | null
  chunkIndex: number | null
  createdAt: Date | null
}

export type ChatChunkMaxAggregateOutputType = {
  id: string | null
  messageId: string | null
  sessionId: string | null
  documentId: string | null
  userId: string | null
  content: string | null
  chunkIndex: number | null
  createdAt: Date | null
}

export type ChatChunkCountAggregateOutputType = {
  id: number
  messageId: number
  sessionId: number
  documentId: number
  userId: number
  content: number
  chunkIndex: number
  createdAt: number
  _all: number
}


export type ChatChunkAvgAggregateInputType = {
  chunkIndex?: true
}

export type ChatChunkSumAggregateInputType = {
  chunkIndex?: true
}

export type ChatChunkMinAggregateInputType = {
  id?: true
  messageId?: true
  sessionId?: true
  documentId?: true
  userId?: true
  content?: true
  chunkIndex?: true
  createdAt?: true
}

export type ChatChunkMaxAggregateInputType = {
  id?: true
  messageId?: true
  sessionId?: true
  documentId?: true
  userId?: true
  content?: true
  chunkIndex?: true
  createdAt?: true
}

export type ChatChunkCountAggregateInputType = {
  id?: true
  messageId?: true
  sessionId?: true
  documentId?: true
  userId?: true
  content?: true
  chunkIndex?: true
  createdAt?: true
  _all?: true
}

export type ChatChunkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatChunk to aggregate.
   */
  where?: Prisma.ChatChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatChunks to fetch.
   */
  orderBy?: Prisma.ChatChunkOrderByWithRelationInput | Prisma.ChatChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatChunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatChunks
  **/
  _count?: true | ChatChunkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChatChunkAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChatChunkSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatChunkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatChunkMaxAggregateInputType
}

export type GetChatChunkAggregateType<T extends ChatChunkAggregateArgs> = {
      [P in keyof T & keyof AggregateChatChunk]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatChunk[P]>
    : Prisma.GetScalarType<T[P], AggregateChatChunk[P]>
}




export type ChatChunkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatChunkWhereInput
  orderBy?: Prisma.ChatChunkOrderByWithAggregationInput | Prisma.ChatChunkOrderByWithAggregationInput[]
  by: Prisma.ChatChunkScalarFieldEnum[] | Prisma.ChatChunkScalarFieldEnum
  having?: Prisma.ChatChunkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatChunkCountAggregateInputType | true
  _avg?: ChatChunkAvgAggregateInputType
  _sum?: ChatChunkSumAggregateInputType
  _min?: ChatChunkMinAggregateInputType
  _max?: ChatChunkMaxAggregateInputType
}

export type ChatChunkGroupByOutputType = {
  id: string
  messageId: string | null
  sessionId: string | null
  documentId: string | null
  userId: string | null
  content: string
  chunkIndex: number | null
  createdAt: Date
  _count: ChatChunkCountAggregateOutputType | null
  _avg: ChatChunkAvgAggregateOutputType | null
  _sum: ChatChunkSumAggregateOutputType | null
  _min: ChatChunkMinAggregateOutputType | null
  _max: ChatChunkMaxAggregateOutputType | null
}

type GetChatChunkGroupByPayload<T extends ChatChunkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatChunkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatChunkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatChunkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatChunkGroupByOutputType[P]>
      }
    >
  >



export type ChatChunkWhereInput = {
  AND?: Prisma.ChatChunkWhereInput | Prisma.ChatChunkWhereInput[]
  OR?: Prisma.ChatChunkWhereInput[]
  NOT?: Prisma.ChatChunkWhereInput | Prisma.ChatChunkWhereInput[]
  id?: Prisma.StringFilter<"ChatChunk"> | string
  messageId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  sessionId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  documentId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  userId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  content?: Prisma.StringFilter<"ChatChunk"> | string
  chunkIndex?: Prisma.IntNullableFilter<"ChatChunk"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ChatChunk"> | Date | string
  message?: Prisma.XOR<Prisma.ChatMessageNullableScalarRelationFilter, Prisma.ChatMessageWhereInput> | null
  session?: Prisma.XOR<Prisma.ChatSessionNullableScalarRelationFilter, Prisma.ChatSessionWhereInput> | null
  document?: Prisma.XOR<Prisma.DocumentNullableScalarRelationFilter, Prisma.DocumentWhereInput> | null
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type ChatChunkOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrderInput | Prisma.SortOrder
  sessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  documentId?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  chunkIndex?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  message?: Prisma.ChatMessageOrderByWithRelationInput
  session?: Prisma.ChatSessionOrderByWithRelationInput
  document?: Prisma.DocumentOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ChatChunkWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatChunkWhereInput | Prisma.ChatChunkWhereInput[]
  OR?: Prisma.ChatChunkWhereInput[]
  NOT?: Prisma.ChatChunkWhereInput | Prisma.ChatChunkWhereInput[]
  messageId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  sessionId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  documentId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  userId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  content?: Prisma.StringFilter<"ChatChunk"> | string
  chunkIndex?: Prisma.IntNullableFilter<"ChatChunk"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ChatChunk"> | Date | string
  message?: Prisma.XOR<Prisma.ChatMessageNullableScalarRelationFilter, Prisma.ChatMessageWhereInput> | null
  session?: Prisma.XOR<Prisma.ChatSessionNullableScalarRelationFilter, Prisma.ChatSessionWhereInput> | null
  document?: Prisma.XOR<Prisma.DocumentNullableScalarRelationFilter, Prisma.DocumentWhereInput> | null
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id">

export type ChatChunkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrderInput | Prisma.SortOrder
  sessionId?: Prisma.SortOrderInput | Prisma.SortOrder
  documentId?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  chunkIndex?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ChatChunkCountOrderByAggregateInput
  _avg?: Prisma.ChatChunkAvgOrderByAggregateInput
  _max?: Prisma.ChatChunkMaxOrderByAggregateInput
  _min?: Prisma.ChatChunkMinOrderByAggregateInput
  _sum?: Prisma.ChatChunkSumOrderByAggregateInput
}

export type ChatChunkScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatChunkScalarWhereWithAggregatesInput | Prisma.ChatChunkScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatChunkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatChunkScalarWhereWithAggregatesInput | Prisma.ChatChunkScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ChatChunk"> | string
  messageId?: Prisma.StringNullableWithAggregatesFilter<"ChatChunk"> | string | null
  sessionId?: Prisma.StringNullableWithAggregatesFilter<"ChatChunk"> | string | null
  documentId?: Prisma.StringNullableWithAggregatesFilter<"ChatChunk"> | string | null
  userId?: Prisma.StringNullableWithAggregatesFilter<"ChatChunk"> | string | null
  content?: Prisma.StringWithAggregatesFilter<"ChatChunk"> | string
  chunkIndex?: Prisma.IntNullableWithAggregatesFilter<"ChatChunk"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChatChunk"> | Date | string
}

export type ChatChunkUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.ChatMessageUpdateOneWithoutChunksNestedInput
  session?: Prisma.ChatSessionUpdateOneWithoutChatChunksNestedInput
  document?: Prisma.DocumentUpdateOneWithoutChatChunksNestedInput
  user?: Prisma.UserUpdateOneWithoutChatChunksNestedInput
}

export type ChatChunkUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkListRelationFilter = {
  every?: Prisma.ChatChunkWhereInput
  some?: Prisma.ChatChunkWhereInput
  none?: Prisma.ChatChunkWhereInput
}

export type ChatChunkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatChunkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  chunkIndex?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatChunkAvgOrderByAggregateInput = {
  chunkIndex?: Prisma.SortOrder
}

export type ChatChunkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  chunkIndex?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatChunkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  messageId?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  chunkIndex?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ChatChunkSumOrderByAggregateInput = {
  chunkIndex?: Prisma.SortOrder
}

export type ChatChunkCreateNestedManyWithoutUserInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUncheckedCreateNestedManyWithoutUserInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUpdateManyWithoutUserNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutUserInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutUserInput | Prisma.ChatChunkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkUncheckedUpdateManyWithoutUserNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutUserInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutUserInput | Prisma.ChatChunkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkCreateNestedManyWithoutDocumentInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUncheckedCreateNestedManyWithoutDocumentInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUpdateManyWithoutDocumentNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutDocumentInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutDocumentInput | Prisma.ChatChunkUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkUncheckedUpdateManyWithoutDocumentNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutDocumentInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutDocumentInput | Prisma.ChatChunkUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkCreateNestedManyWithoutSessionInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUncheckedCreateNestedManyWithoutSessionInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUpdateManyWithoutSessionNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutSessionInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutSessionInput | Prisma.ChatChunkUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkUncheckedUpdateManyWithoutSessionNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutSessionInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutSessionInput | Prisma.ChatChunkUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkCreateNestedManyWithoutMessageInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUncheckedCreateNestedManyWithoutMessageInput = {
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
}

export type ChatChunkUpdateManyWithoutMessageNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutMessageInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutMessageInput | Prisma.ChatChunkUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkUncheckedUpdateManyWithoutMessageNestedInput = {
  set?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  disconnect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  delete?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  connect?: Prisma.ChatChunkWhereUniqueInput | Prisma.ChatChunkWhereUniqueInput[]
  update?: Prisma.ChatChunkUpdateWithWhereUniqueWithoutMessageInput | Prisma.ChatChunkUpdateWithWhereUniqueWithoutMessageInput[]
  updateMany?: Prisma.ChatChunkUpdateManyWithWhereWithoutMessageInput | Prisma.ChatChunkUpdateManyWithWhereWithoutMessageInput[]
  deleteMany?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
}

export type ChatChunkUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ChatChunkWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateWithoutUserInput, Prisma.ChatChunkUncheckedUpdateWithoutUserInput>
}

export type ChatChunkUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ChatChunkScalarWhereInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateManyMutationInput, Prisma.ChatChunkUncheckedUpdateManyWithoutUserInput>
}

export type ChatChunkScalarWhereInput = {
  AND?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
  OR?: Prisma.ChatChunkScalarWhereInput[]
  NOT?: Prisma.ChatChunkScalarWhereInput | Prisma.ChatChunkScalarWhereInput[]
  id?: Prisma.StringFilter<"ChatChunk"> | string
  messageId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  sessionId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  documentId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  userId?: Prisma.StringNullableFilter<"ChatChunk"> | string | null
  content?: Prisma.StringFilter<"ChatChunk"> | string
  chunkIndex?: Prisma.IntNullableFilter<"ChatChunk"> | number | null
  createdAt?: Prisma.DateTimeFilter<"ChatChunk"> | Date | string
}

export type ChatChunkUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.ChatChunkWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateWithoutDocumentInput, Prisma.ChatChunkUncheckedUpdateWithoutDocumentInput>
}

export type ChatChunkUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.ChatChunkScalarWhereInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateManyMutationInput, Prisma.ChatChunkUncheckedUpdateManyWithoutDocumentInput>
}

export type ChatChunkUpdateWithWhereUniqueWithoutSessionInput = {
  where: Prisma.ChatChunkWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateWithoutSessionInput, Prisma.ChatChunkUncheckedUpdateWithoutSessionInput>
}

export type ChatChunkUpdateManyWithWhereWithoutSessionInput = {
  where: Prisma.ChatChunkScalarWhereInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateManyMutationInput, Prisma.ChatChunkUncheckedUpdateManyWithoutSessionInput>
}

export type ChatChunkUpdateWithWhereUniqueWithoutMessageInput = {
  where: Prisma.ChatChunkWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateWithoutMessageInput, Prisma.ChatChunkUncheckedUpdateWithoutMessageInput>
}

export type ChatChunkUpdateManyWithWhereWithoutMessageInput = {
  where: Prisma.ChatChunkScalarWhereInput
  data: Prisma.XOR<Prisma.ChatChunkUpdateManyMutationInput, Prisma.ChatChunkUncheckedUpdateManyWithoutMessageInput>
}

export type ChatChunkUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.ChatMessageUpdateOneWithoutChunksNestedInput
  session?: Prisma.ChatSessionUpdateOneWithoutChatChunksNestedInput
  document?: Prisma.DocumentUpdateOneWithoutChatChunksNestedInput
}

export type ChatChunkUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.ChatMessageUpdateOneWithoutChunksNestedInput
  session?: Prisma.ChatSessionUpdateOneWithoutChatChunksNestedInput
  user?: Prisma.UserUpdateOneWithoutChatChunksNestedInput
}

export type ChatChunkUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUpdateWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  message?: Prisma.ChatMessageUpdateOneWithoutChunksNestedInput
  document?: Prisma.DocumentUpdateOneWithoutChatChunksNestedInput
  user?: Prisma.UserUpdateOneWithoutChatChunksNestedInput
}

export type ChatChunkUncheckedUpdateWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUncheckedUpdateManyWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  messageId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  session?: Prisma.ChatSessionUpdateOneWithoutChatChunksNestedInput
  document?: Prisma.DocumentUpdateOneWithoutChatChunksNestedInput
  user?: Prisma.UserUpdateOneWithoutChatChunksNestedInput
}

export type ChatChunkUncheckedUpdateWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatChunkUncheckedUpdateManyWithoutMessageInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  documentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.StringFieldUpdateOperationsInput | string
  chunkIndex?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChatChunkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  sessionId?: boolean
  documentId?: boolean
  userId?: boolean
  content?: boolean
  chunkIndex?: boolean
  createdAt?: boolean
  message?: boolean | Prisma.ChatChunk$messageArgs<ExtArgs>
  session?: boolean | Prisma.ChatChunk$sessionArgs<ExtArgs>
  document?: boolean | Prisma.ChatChunk$documentArgs<ExtArgs>
  user?: boolean | Prisma.ChatChunk$userArgs<ExtArgs>
}, ExtArgs["result"]["chatChunk"]>


export type ChatChunkSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  messageId?: boolean
  sessionId?: boolean
  documentId?: boolean
  userId?: boolean
  content?: boolean
  chunkIndex?: boolean
  createdAt?: boolean
  message?: boolean | Prisma.ChatChunk$messageArgs<ExtArgs>
  session?: boolean | Prisma.ChatChunk$sessionArgs<ExtArgs>
  document?: boolean | Prisma.ChatChunk$documentArgs<ExtArgs>
  user?: boolean | Prisma.ChatChunk$userArgs<ExtArgs>
}, ExtArgs["result"]["chatChunk"]>

export type ChatChunkSelectScalar = {
  id?: boolean
  messageId?: boolean
  sessionId?: boolean
  documentId?: boolean
  userId?: boolean
  content?: boolean
  chunkIndex?: boolean
  createdAt?: boolean
}

export type ChatChunkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "messageId" | "sessionId" | "documentId" | "userId" | "content" | "chunkIndex" | "createdAt", ExtArgs["result"]["chatChunk"]>
export type ChatChunkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatChunk$messageArgs<ExtArgs>
  session?: boolean | Prisma.ChatChunk$sessionArgs<ExtArgs>
  document?: boolean | Prisma.ChatChunk$documentArgs<ExtArgs>
  user?: boolean | Prisma.ChatChunk$userArgs<ExtArgs>
}
export type ChatChunkIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  message?: boolean | Prisma.ChatChunk$messageArgs<ExtArgs>
  session?: boolean | Prisma.ChatChunk$sessionArgs<ExtArgs>
  document?: boolean | Prisma.ChatChunk$documentArgs<ExtArgs>
  user?: boolean | Prisma.ChatChunk$userArgs<ExtArgs>
}

export type $ChatChunkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatChunk"
  objects: {
    message: Prisma.$ChatMessagePayload<ExtArgs> | null
    session: Prisma.$ChatSessionPayload<ExtArgs> | null
    document: Prisma.$DocumentPayload<ExtArgs> | null
    user: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    messageId: string | null
    sessionId: string | null
    documentId: string | null
    userId: string | null
    content: string
    chunkIndex: number | null
    createdAt: Date
  }, ExtArgs["result"]["chatChunk"]>
  composites: {}
}

export type ChatChunkGetPayload<S extends boolean | null | undefined | ChatChunkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload, S>

export type ChatChunkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatChunkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatChunkCountAggregateInputType | true
  }

export interface ChatChunkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatChunk'], meta: { name: 'ChatChunk' } }
  /**
   * Find zero or one ChatChunk that matches the filter.
   * @param {ChatChunkFindUniqueArgs} args - Arguments to find a ChatChunk
   * @example
   * // Get one ChatChunk
   * const chatChunk = await prisma.chatChunk.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatChunkFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatChunkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatChunkClient<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatChunk that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatChunkFindUniqueOrThrowArgs} args - Arguments to find a ChatChunk
   * @example
   * // Get one ChatChunk
   * const chatChunk = await prisma.chatChunk.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatChunkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatChunkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatChunkClient<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatChunk that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatChunkFindFirstArgs} args - Arguments to find a ChatChunk
   * @example
   * // Get one ChatChunk
   * const chatChunk = await prisma.chatChunk.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatChunkFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatChunkFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatChunkClient<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatChunk that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatChunkFindFirstOrThrowArgs} args - Arguments to find a ChatChunk
   * @example
   * // Get one ChatChunk
   * const chatChunk = await prisma.chatChunk.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatChunkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatChunkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatChunkClient<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatChunks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatChunkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatChunks
   * const chatChunks = await prisma.chatChunk.findMany()
   * 
   * // Get first 10 ChatChunks
   * const chatChunks = await prisma.chatChunk.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatChunkWithIdOnly = await prisma.chatChunk.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatChunkFindManyArgs>(args?: Prisma.SelectSubset<T, ChatChunkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Delete a ChatChunk.
   * @param {ChatChunkDeleteArgs} args - Arguments to delete one ChatChunk.
   * @example
   * // Delete one ChatChunk
   * const ChatChunk = await prisma.chatChunk.delete({
   *   where: {
   *     // ... filter to delete one ChatChunk
   *   }
   * })
   * 
   */
  delete<T extends ChatChunkDeleteArgs>(args: Prisma.SelectSubset<T, ChatChunkDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatChunkClient<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatChunk.
   * @param {ChatChunkUpdateArgs} args - Arguments to update one ChatChunk.
   * @example
   * // Update one ChatChunk
   * const chatChunk = await prisma.chatChunk.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatChunkUpdateArgs>(args: Prisma.SelectSubset<T, ChatChunkUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatChunkClient<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatChunks.
   * @param {ChatChunkDeleteManyArgs} args - Arguments to filter ChatChunks to delete.
   * @example
   * // Delete a few ChatChunks
   * const { count } = await prisma.chatChunk.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatChunkDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatChunkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatChunks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatChunkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatChunks
   * const chatChunk = await prisma.chatChunk.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatChunkUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatChunkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatChunks and returns the data updated in the database.
   * @param {ChatChunkUpdateManyAndReturnArgs} args - Arguments to update many ChatChunks.
   * @example
   * // Update many ChatChunks
   * const chatChunk = await prisma.chatChunk.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChatChunks and only return the `id`
   * const chatChunkWithIdOnly = await prisma.chatChunk.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatChunkUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatChunkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatChunkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>


  /**
   * Count the number of ChatChunks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatChunkCountArgs} args - Arguments to filter ChatChunks to count.
   * @example
   * // Count the number of ChatChunks
   * const count = await prisma.chatChunk.count({
   *   where: {
   *     // ... the filter for the ChatChunks we want to count
   *   }
   * })
  **/
  count<T extends ChatChunkCountArgs>(
    args?: Prisma.Subset<T, ChatChunkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatChunkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatChunk.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatChunkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatChunkAggregateArgs>(args: Prisma.Subset<T, ChatChunkAggregateArgs>): Prisma.PrismaPromise<GetChatChunkAggregateType<T>>

  /**
   * Group by ChatChunk.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatChunkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatChunkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatChunkGroupByArgs['orderBy'] }
      : { orderBy?: ChatChunkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatChunkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatChunkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatChunk model
 */
readonly fields: ChatChunkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatChunk.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatChunkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  message<T extends Prisma.ChatChunk$messageArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatChunk$messageArgs<ExtArgs>>): Prisma.Prisma__ChatMessageClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  session<T extends Prisma.ChatChunk$sessionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatChunk$sessionArgs<ExtArgs>>): Prisma.Prisma__ChatSessionClient<runtime.Types.Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  document<T extends Prisma.ChatChunk$documentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatChunk$documentArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.ChatChunk$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatChunk$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatChunk model
 */
export interface ChatChunkFieldRefs {
  readonly id: Prisma.FieldRef<"ChatChunk", 'String'>
  readonly messageId: Prisma.FieldRef<"ChatChunk", 'String'>
  readonly sessionId: Prisma.FieldRef<"ChatChunk", 'String'>
  readonly documentId: Prisma.FieldRef<"ChatChunk", 'String'>
  readonly userId: Prisma.FieldRef<"ChatChunk", 'String'>
  readonly content: Prisma.FieldRef<"ChatChunk", 'String'>
  readonly chunkIndex: Prisma.FieldRef<"ChatChunk", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ChatChunk", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatChunk findUnique
 */
export type ChatChunkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
  /**
   * Filter, which ChatChunk to fetch.
   */
  where: Prisma.ChatChunkWhereUniqueInput
}

/**
 * ChatChunk findUniqueOrThrow
 */
export type ChatChunkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
  /**
   * Filter, which ChatChunk to fetch.
   */
  where: Prisma.ChatChunkWhereUniqueInput
}

/**
 * ChatChunk findFirst
 */
export type ChatChunkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
  /**
   * Filter, which ChatChunk to fetch.
   */
  where?: Prisma.ChatChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatChunks to fetch.
   */
  orderBy?: Prisma.ChatChunkOrderByWithRelationInput | Prisma.ChatChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatChunks.
   */
  cursor?: Prisma.ChatChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatChunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatChunks.
   */
  distinct?: Prisma.ChatChunkScalarFieldEnum | Prisma.ChatChunkScalarFieldEnum[]
}

/**
 * ChatChunk findFirstOrThrow
 */
export type ChatChunkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
  /**
   * Filter, which ChatChunk to fetch.
   */
  where?: Prisma.ChatChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatChunks to fetch.
   */
  orderBy?: Prisma.ChatChunkOrderByWithRelationInput | Prisma.ChatChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatChunks.
   */
  cursor?: Prisma.ChatChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatChunks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatChunks.
   */
  distinct?: Prisma.ChatChunkScalarFieldEnum | Prisma.ChatChunkScalarFieldEnum[]
}

/**
 * ChatChunk findMany
 */
export type ChatChunkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
  /**
   * Filter, which ChatChunks to fetch.
   */
  where?: Prisma.ChatChunkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatChunks to fetch.
   */
  orderBy?: Prisma.ChatChunkOrderByWithRelationInput | Prisma.ChatChunkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatChunks.
   */
  cursor?: Prisma.ChatChunkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatChunks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatChunks.
   */
  skip?: number
  distinct?: Prisma.ChatChunkScalarFieldEnum | Prisma.ChatChunkScalarFieldEnum[]
}

/**
 * ChatChunk update
 */
export type ChatChunkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatChunk.
   */
  data: Prisma.XOR<Prisma.ChatChunkUpdateInput, Prisma.ChatChunkUncheckedUpdateInput>
  /**
   * Choose, which ChatChunk to update.
   */
  where: Prisma.ChatChunkWhereUniqueInput
}

/**
 * ChatChunk updateMany
 */
export type ChatChunkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatChunks.
   */
  data: Prisma.XOR<Prisma.ChatChunkUpdateManyMutationInput, Prisma.ChatChunkUncheckedUpdateManyInput>
  /**
   * Filter which ChatChunks to update
   */
  where?: Prisma.ChatChunkWhereInput
  /**
   * Limit how many ChatChunks to update.
   */
  limit?: number
}

/**
 * ChatChunk updateManyAndReturn
 */
export type ChatChunkUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * The data used to update ChatChunks.
   */
  data: Prisma.XOR<Prisma.ChatChunkUpdateManyMutationInput, Prisma.ChatChunkUncheckedUpdateManyInput>
  /**
   * Filter which ChatChunks to update
   */
  where?: Prisma.ChatChunkWhereInput
  /**
   * Limit how many ChatChunks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChatChunk delete
 */
export type ChatChunkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
  /**
   * Filter which ChatChunk to delete.
   */
  where: Prisma.ChatChunkWhereUniqueInput
}

/**
 * ChatChunk deleteMany
 */
export type ChatChunkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatChunks to delete
   */
  where?: Prisma.ChatChunkWhereInput
  /**
   * Limit how many ChatChunks to delete.
   */
  limit?: number
}

/**
 * ChatChunk.message
 */
export type ChatChunk$messageArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessage
   */
  select?: Prisma.ChatMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessage
   */
  omit?: Prisma.ChatMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessageInclude<ExtArgs> | null
  where?: Prisma.ChatMessageWhereInput
}

/**
 * ChatChunk.session
 */
export type ChatChunk$sessionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatSession
   */
  select?: Prisma.ChatSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatSession
   */
  omit?: Prisma.ChatSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatSessionInclude<ExtArgs> | null
  where?: Prisma.ChatSessionWhereInput
}

/**
 * ChatChunk.document
 */
export type ChatChunk$documentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Document
   */
  select?: Prisma.DocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Document
   */
  omit?: Prisma.DocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentInclude<ExtArgs> | null
  where?: Prisma.DocumentWhereInput
}

/**
 * ChatChunk.user
 */
export type ChatChunk$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * ChatChunk without action
 */
export type ChatChunkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatChunk
   */
  select?: Prisma.ChatChunkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatChunk
   */
  omit?: Prisma.ChatChunkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatChunkInclude<ExtArgs> | null
}
