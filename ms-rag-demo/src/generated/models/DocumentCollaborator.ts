
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DocumentCollaborator` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DocumentCollaborator
 * 
 */
export type DocumentCollaboratorModel = runtime.Types.Result.DefaultSelection<Prisma.$DocumentCollaboratorPayload>

export type AggregateDocumentCollaborator = {
  _count: DocumentCollaboratorCountAggregateOutputType | null
  _min: DocumentCollaboratorMinAggregateOutputType | null
  _max: DocumentCollaboratorMaxAggregateOutputType | null
}

export type DocumentCollaboratorMinAggregateOutputType = {
  id: string | null
  documentId: string | null
  userId: string | null
  role: string | null
  invitedAt: Date | null
}

export type DocumentCollaboratorMaxAggregateOutputType = {
  id: string | null
  documentId: string | null
  userId: string | null
  role: string | null
  invitedAt: Date | null
}

export type DocumentCollaboratorCountAggregateOutputType = {
  id: number
  documentId: number
  userId: number
  role: number
  invitedAt: number
  _all: number
}


export type DocumentCollaboratorMinAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
  role?: true
  invitedAt?: true
}

export type DocumentCollaboratorMaxAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
  role?: true
  invitedAt?: true
}

export type DocumentCollaboratorCountAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
  role?: true
  invitedAt?: true
  _all?: true
}

export type DocumentCollaboratorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentCollaborator to aggregate.
   */
  where?: Prisma.DocumentCollaboratorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentCollaborators to fetch.
   */
  orderBy?: Prisma.DocumentCollaboratorOrderByWithRelationInput | Prisma.DocumentCollaboratorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DocumentCollaboratorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentCollaborators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentCollaborators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DocumentCollaborators
  **/
  _count?: true | DocumentCollaboratorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DocumentCollaboratorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DocumentCollaboratorMaxAggregateInputType
}

export type GetDocumentCollaboratorAggregateType<T extends DocumentCollaboratorAggregateArgs> = {
      [P in keyof T & keyof AggregateDocumentCollaborator]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocumentCollaborator[P]>
    : Prisma.GetScalarType<T[P], AggregateDocumentCollaborator[P]>
}




export type DocumentCollaboratorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentCollaboratorWhereInput
  orderBy?: Prisma.DocumentCollaboratorOrderByWithAggregationInput | Prisma.DocumentCollaboratorOrderByWithAggregationInput[]
  by: Prisma.DocumentCollaboratorScalarFieldEnum[] | Prisma.DocumentCollaboratorScalarFieldEnum
  having?: Prisma.DocumentCollaboratorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DocumentCollaboratorCountAggregateInputType | true
  _min?: DocumentCollaboratorMinAggregateInputType
  _max?: DocumentCollaboratorMaxAggregateInputType
}

export type DocumentCollaboratorGroupByOutputType = {
  id: string
  documentId: string
  userId: string
  role: string
  invitedAt: Date
  _count: DocumentCollaboratorCountAggregateOutputType | null
  _min: DocumentCollaboratorMinAggregateOutputType | null
  _max: DocumentCollaboratorMaxAggregateOutputType | null
}

type GetDocumentCollaboratorGroupByPayload<T extends DocumentCollaboratorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DocumentCollaboratorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DocumentCollaboratorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentCollaboratorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentCollaboratorGroupByOutputType[P]>
      }
    >
  >



export type DocumentCollaboratorWhereInput = {
  AND?: Prisma.DocumentCollaboratorWhereInput | Prisma.DocumentCollaboratorWhereInput[]
  OR?: Prisma.DocumentCollaboratorWhereInput[]
  NOT?: Prisma.DocumentCollaboratorWhereInput | Prisma.DocumentCollaboratorWhereInput[]
  id?: Prisma.StringFilter<"DocumentCollaborator"> | string
  documentId?: Prisma.StringFilter<"DocumentCollaborator"> | string
  userId?: Prisma.StringFilter<"DocumentCollaborator"> | string
  role?: Prisma.StringFilter<"DocumentCollaborator"> | string
  invitedAt?: Prisma.DateTimeFilter<"DocumentCollaborator"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type DocumentCollaboratorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  invitedAt?: Prisma.SortOrder
  document?: Prisma.DocumentOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type DocumentCollaboratorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DocumentCollaboratorWhereInput | Prisma.DocumentCollaboratorWhereInput[]
  OR?: Prisma.DocumentCollaboratorWhereInput[]
  NOT?: Prisma.DocumentCollaboratorWhereInput | Prisma.DocumentCollaboratorWhereInput[]
  documentId?: Prisma.StringFilter<"DocumentCollaborator"> | string
  userId?: Prisma.StringFilter<"DocumentCollaborator"> | string
  role?: Prisma.StringFilter<"DocumentCollaborator"> | string
  invitedAt?: Prisma.DateTimeFilter<"DocumentCollaborator"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type DocumentCollaboratorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  invitedAt?: Prisma.SortOrder
  _count?: Prisma.DocumentCollaboratorCountOrderByAggregateInput
  _max?: Prisma.DocumentCollaboratorMaxOrderByAggregateInput
  _min?: Prisma.DocumentCollaboratorMinOrderByAggregateInput
}

export type DocumentCollaboratorScalarWhereWithAggregatesInput = {
  AND?: Prisma.DocumentCollaboratorScalarWhereWithAggregatesInput | Prisma.DocumentCollaboratorScalarWhereWithAggregatesInput[]
  OR?: Prisma.DocumentCollaboratorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DocumentCollaboratorScalarWhereWithAggregatesInput | Prisma.DocumentCollaboratorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DocumentCollaborator"> | string
  documentId?: Prisma.StringWithAggregatesFilter<"DocumentCollaborator"> | string
  userId?: Prisma.StringWithAggregatesFilter<"DocumentCollaborator"> | string
  role?: Prisma.StringWithAggregatesFilter<"DocumentCollaborator"> | string
  invitedAt?: Prisma.DateTimeWithAggregatesFilter<"DocumentCollaborator"> | Date | string
}

export type DocumentCollaboratorCreateInput = {
  id?: string
  role: string
  invitedAt?: Date | string
  document: Prisma.DocumentCreateNestedOneWithoutCollaboratorsInput
  user: Prisma.UserCreateNestedOneWithoutCollaboratorsInput
}

export type DocumentCollaboratorUncheckedCreateInput = {
  id?: string
  documentId: string
  userId: string
  role: string
  invitedAt?: Date | string
}

export type DocumentCollaboratorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutCollaboratorsNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutCollaboratorsNestedInput
}

export type DocumentCollaboratorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentCollaboratorCreateManyInput = {
  id?: string
  documentId: string
  userId: string
  role: string
  invitedAt?: Date | string
}

export type DocumentCollaboratorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentCollaboratorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentCollaboratorListRelationFilter = {
  every?: Prisma.DocumentCollaboratorWhereInput
  some?: Prisma.DocumentCollaboratorWhereInput
  none?: Prisma.DocumentCollaboratorWhereInput
}

export type DocumentCollaboratorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DocumentCollaboratorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  invitedAt?: Prisma.SortOrder
}

export type DocumentCollaboratorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  invitedAt?: Prisma.SortOrder
}

export type DocumentCollaboratorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  invitedAt?: Prisma.SortOrder
}

export type DocumentCollaboratorCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput> | Prisma.DocumentCollaboratorCreateWithoutUserInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyUserInputEnvelope
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
}

export type DocumentCollaboratorUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput> | Prisma.DocumentCollaboratorCreateWithoutUserInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyUserInputEnvelope
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
}

export type DocumentCollaboratorUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput> | Prisma.DocumentCollaboratorCreateWithoutUserInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutUserInput | Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyUserInputEnvelope
  set?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  disconnect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  delete?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  update?: Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutUserInput | Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutUserInput | Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DocumentCollaboratorScalarWhereInput | Prisma.DocumentCollaboratorScalarWhereInput[]
}

export type DocumentCollaboratorUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput> | Prisma.DocumentCollaboratorCreateWithoutUserInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutUserInput | Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyUserInputEnvelope
  set?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  disconnect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  delete?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  update?: Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutUserInput | Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutUserInput | Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.DocumentCollaboratorScalarWhereInput | Prisma.DocumentCollaboratorScalarWhereInput[]
}

export type DocumentCollaboratorCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput> | Prisma.DocumentCollaboratorCreateWithoutDocumentInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyDocumentInputEnvelope
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
}

export type DocumentCollaboratorUncheckedCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput> | Prisma.DocumentCollaboratorCreateWithoutDocumentInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyDocumentInputEnvelope
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
}

export type DocumentCollaboratorUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput> | Prisma.DocumentCollaboratorCreateWithoutDocumentInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutDocumentInput | Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyDocumentInputEnvelope
  set?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  disconnect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  delete?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  update?: Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentCollaboratorScalarWhereInput | Prisma.DocumentCollaboratorScalarWhereInput[]
}

export type DocumentCollaboratorUncheckedUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput> | Prisma.DocumentCollaboratorCreateWithoutDocumentInput[] | Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput | Prisma.DocumentCollaboratorCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutDocumentInput | Prisma.DocumentCollaboratorUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.DocumentCollaboratorCreateManyDocumentInputEnvelope
  set?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  disconnect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  delete?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  connect?: Prisma.DocumentCollaboratorWhereUniqueInput | Prisma.DocumentCollaboratorWhereUniqueInput[]
  update?: Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentCollaboratorUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentCollaboratorUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentCollaboratorScalarWhereInput | Prisma.DocumentCollaboratorScalarWhereInput[]
}

export type DocumentCollaboratorCreateWithoutUserInput = {
  id?: string
  role: string
  invitedAt?: Date | string
  document: Prisma.DocumentCreateNestedOneWithoutCollaboratorsInput
}

export type DocumentCollaboratorUncheckedCreateWithoutUserInput = {
  id?: string
  documentId: string
  role: string
  invitedAt?: Date | string
}

export type DocumentCollaboratorCreateOrConnectWithoutUserInput = {
  where: Prisma.DocumentCollaboratorWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput>
}

export type DocumentCollaboratorCreateManyUserInputEnvelope = {
  data: Prisma.DocumentCollaboratorCreateManyUserInput | Prisma.DocumentCollaboratorCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type DocumentCollaboratorUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.DocumentCollaboratorWhereUniqueInput
  update: Prisma.XOR<Prisma.DocumentCollaboratorUpdateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutUserInput>
}

export type DocumentCollaboratorUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.DocumentCollaboratorWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentCollaboratorUpdateWithoutUserInput, Prisma.DocumentCollaboratorUncheckedUpdateWithoutUserInput>
}

export type DocumentCollaboratorUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.DocumentCollaboratorScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentCollaboratorUpdateManyMutationInput, Prisma.DocumentCollaboratorUncheckedUpdateManyWithoutUserInput>
}

export type DocumentCollaboratorScalarWhereInput = {
  AND?: Prisma.DocumentCollaboratorScalarWhereInput | Prisma.DocumentCollaboratorScalarWhereInput[]
  OR?: Prisma.DocumentCollaboratorScalarWhereInput[]
  NOT?: Prisma.DocumentCollaboratorScalarWhereInput | Prisma.DocumentCollaboratorScalarWhereInput[]
  id?: Prisma.StringFilter<"DocumentCollaborator"> | string
  documentId?: Prisma.StringFilter<"DocumentCollaborator"> | string
  userId?: Prisma.StringFilter<"DocumentCollaborator"> | string
  role?: Prisma.StringFilter<"DocumentCollaborator"> | string
  invitedAt?: Prisma.DateTimeFilter<"DocumentCollaborator"> | Date | string
}

export type DocumentCollaboratorCreateWithoutDocumentInput = {
  id?: string
  role: string
  invitedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCollaboratorsInput
}

export type DocumentCollaboratorUncheckedCreateWithoutDocumentInput = {
  id?: string
  userId: string
  role: string
  invitedAt?: Date | string
}

export type DocumentCollaboratorCreateOrConnectWithoutDocumentInput = {
  where: Prisma.DocumentCollaboratorWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput>
}

export type DocumentCollaboratorCreateManyDocumentInputEnvelope = {
  data: Prisma.DocumentCollaboratorCreateManyDocumentInput | Prisma.DocumentCollaboratorCreateManyDocumentInput[]
  skipDuplicates?: boolean
}

export type DocumentCollaboratorUpsertWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.DocumentCollaboratorWhereUniqueInput
  update: Prisma.XOR<Prisma.DocumentCollaboratorUpdateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedUpdateWithoutDocumentInput>
  create: Prisma.XOR<Prisma.DocumentCollaboratorCreateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedCreateWithoutDocumentInput>
}

export type DocumentCollaboratorUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.DocumentCollaboratorWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentCollaboratorUpdateWithoutDocumentInput, Prisma.DocumentCollaboratorUncheckedUpdateWithoutDocumentInput>
}

export type DocumentCollaboratorUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.DocumentCollaboratorScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentCollaboratorUpdateManyMutationInput, Prisma.DocumentCollaboratorUncheckedUpdateManyWithoutDocumentInput>
}

export type DocumentCollaboratorCreateManyUserInput = {
  id?: string
  documentId: string
  role: string
  invitedAt?: Date | string
}

export type DocumentCollaboratorUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutCollaboratorsNestedInput
}

export type DocumentCollaboratorUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentCollaboratorUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentCollaboratorCreateManyDocumentInput = {
  id?: string
  userId: string
  role: string
  invitedAt?: Date | string
}

export type DocumentCollaboratorUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCollaboratorsNestedInput
}

export type DocumentCollaboratorUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentCollaboratorUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  invitedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DocumentCollaboratorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  userId?: boolean
  role?: boolean
  invitedAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentCollaborator"]>

export type DocumentCollaboratorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  userId?: boolean
  role?: boolean
  invitedAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentCollaborator"]>

export type DocumentCollaboratorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  userId?: boolean
  role?: boolean
  invitedAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentCollaborator"]>

export type DocumentCollaboratorSelectScalar = {
  id?: boolean
  documentId?: boolean
  userId?: boolean
  role?: boolean
  invitedAt?: boolean
}

export type DocumentCollaboratorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "documentId" | "userId" | "role" | "invitedAt", ExtArgs["result"]["documentCollaborator"]>
export type DocumentCollaboratorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DocumentCollaboratorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DocumentCollaboratorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $DocumentCollaboratorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DocumentCollaborator"
  objects: {
    document: Prisma.$DocumentPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    documentId: string
    userId: string
    role: string
    invitedAt: Date
  }, ExtArgs["result"]["documentCollaborator"]>
  composites: {}
}

export type DocumentCollaboratorGetPayload<S extends boolean | null | undefined | DocumentCollaboratorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload, S>

export type DocumentCollaboratorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DocumentCollaboratorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DocumentCollaboratorCountAggregateInputType | true
  }

export interface DocumentCollaboratorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentCollaborator'], meta: { name: 'DocumentCollaborator' } }
  /**
   * Find zero or one DocumentCollaborator that matches the filter.
   * @param {DocumentCollaboratorFindUniqueArgs} args - Arguments to find a DocumentCollaborator
   * @example
   * // Get one DocumentCollaborator
   * const documentCollaborator = await prisma.documentCollaborator.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentCollaboratorFindUniqueArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DocumentCollaborator that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentCollaboratorFindUniqueOrThrowArgs} args - Arguments to find a DocumentCollaborator
   * @example
   * // Get one DocumentCollaborator
   * const documentCollaborator = await prisma.documentCollaborator.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentCollaboratorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentCollaborator that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCollaboratorFindFirstArgs} args - Arguments to find a DocumentCollaborator
   * @example
   * // Get one DocumentCollaborator
   * const documentCollaborator = await prisma.documentCollaborator.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentCollaboratorFindFirstArgs>(args?: Prisma.SelectSubset<T, DocumentCollaboratorFindFirstArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentCollaborator that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCollaboratorFindFirstOrThrowArgs} args - Arguments to find a DocumentCollaborator
   * @example
   * // Get one DocumentCollaborator
   * const documentCollaborator = await prisma.documentCollaborator.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentCollaboratorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DocumentCollaboratorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DocumentCollaborators that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCollaboratorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DocumentCollaborators
   * const documentCollaborators = await prisma.documentCollaborator.findMany()
   * 
   * // Get first 10 DocumentCollaborators
   * const documentCollaborators = await prisma.documentCollaborator.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const documentCollaboratorWithIdOnly = await prisma.documentCollaborator.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DocumentCollaboratorFindManyArgs>(args?: Prisma.SelectSubset<T, DocumentCollaboratorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DocumentCollaborator.
   * @param {DocumentCollaboratorCreateArgs} args - Arguments to create a DocumentCollaborator.
   * @example
   * // Create one DocumentCollaborator
   * const DocumentCollaborator = await prisma.documentCollaborator.create({
   *   data: {
   *     // ... data to create a DocumentCollaborator
   *   }
   * })
   * 
   */
  create<T extends DocumentCollaboratorCreateArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorCreateArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DocumentCollaborators.
   * @param {DocumentCollaboratorCreateManyArgs} args - Arguments to create many DocumentCollaborators.
   * @example
   * // Create many DocumentCollaborators
   * const documentCollaborator = await prisma.documentCollaborator.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DocumentCollaboratorCreateManyArgs>(args?: Prisma.SelectSubset<T, DocumentCollaboratorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DocumentCollaborators and returns the data saved in the database.
   * @param {DocumentCollaboratorCreateManyAndReturnArgs} args - Arguments to create many DocumentCollaborators.
   * @example
   * // Create many DocumentCollaborators
   * const documentCollaborator = await prisma.documentCollaborator.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DocumentCollaborators and only return the `id`
   * const documentCollaboratorWithIdOnly = await prisma.documentCollaborator.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DocumentCollaboratorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DocumentCollaboratorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DocumentCollaborator.
   * @param {DocumentCollaboratorDeleteArgs} args - Arguments to delete one DocumentCollaborator.
   * @example
   * // Delete one DocumentCollaborator
   * const DocumentCollaborator = await prisma.documentCollaborator.delete({
   *   where: {
   *     // ... filter to delete one DocumentCollaborator
   *   }
   * })
   * 
   */
  delete<T extends DocumentCollaboratorDeleteArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorDeleteArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DocumentCollaborator.
   * @param {DocumentCollaboratorUpdateArgs} args - Arguments to update one DocumentCollaborator.
   * @example
   * // Update one DocumentCollaborator
   * const documentCollaborator = await prisma.documentCollaborator.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DocumentCollaboratorUpdateArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorUpdateArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DocumentCollaborators.
   * @param {DocumentCollaboratorDeleteManyArgs} args - Arguments to filter DocumentCollaborators to delete.
   * @example
   * // Delete a few DocumentCollaborators
   * const { count } = await prisma.documentCollaborator.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DocumentCollaboratorDeleteManyArgs>(args?: Prisma.SelectSubset<T, DocumentCollaboratorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentCollaborators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCollaboratorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DocumentCollaborators
   * const documentCollaborator = await prisma.documentCollaborator.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DocumentCollaboratorUpdateManyArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentCollaborators and returns the data updated in the database.
   * @param {DocumentCollaboratorUpdateManyAndReturnArgs} args - Arguments to update many DocumentCollaborators.
   * @example
   * // Update many DocumentCollaborators
   * const documentCollaborator = await prisma.documentCollaborator.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DocumentCollaborators and only return the `id`
   * const documentCollaboratorWithIdOnly = await prisma.documentCollaborator.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DocumentCollaboratorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DocumentCollaborator.
   * @param {DocumentCollaboratorUpsertArgs} args - Arguments to update or create a DocumentCollaborator.
   * @example
   * // Update or create a DocumentCollaborator
   * const documentCollaborator = await prisma.documentCollaborator.upsert({
   *   create: {
   *     // ... data to create a DocumentCollaborator
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DocumentCollaborator we want to update
   *   }
   * })
   */
  upsert<T extends DocumentCollaboratorUpsertArgs>(args: Prisma.SelectSubset<T, DocumentCollaboratorUpsertArgs<ExtArgs>>): Prisma.Prisma__DocumentCollaboratorClient<runtime.Types.Result.GetResult<Prisma.$DocumentCollaboratorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DocumentCollaborators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCollaboratorCountArgs} args - Arguments to filter DocumentCollaborators to count.
   * @example
   * // Count the number of DocumentCollaborators
   * const count = await prisma.documentCollaborator.count({
   *   where: {
   *     // ... the filter for the DocumentCollaborators we want to count
   *   }
   * })
  **/
  count<T extends DocumentCollaboratorCountArgs>(
    args?: Prisma.Subset<T, DocumentCollaboratorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DocumentCollaboratorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DocumentCollaborator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCollaboratorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DocumentCollaboratorAggregateArgs>(args: Prisma.Subset<T, DocumentCollaboratorAggregateArgs>): Prisma.PrismaPromise<GetDocumentCollaboratorAggregateType<T>>

  /**
   * Group by DocumentCollaborator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentCollaboratorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DocumentCollaboratorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentCollaboratorGroupByArgs['orderBy'] }
      : { orderBy?: DocumentCollaboratorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DocumentCollaboratorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentCollaboratorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DocumentCollaborator model
 */
readonly fields: DocumentCollaboratorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DocumentCollaborator.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentCollaboratorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DocumentCollaborator model
 */
export interface DocumentCollaboratorFieldRefs {
  readonly id: Prisma.FieldRef<"DocumentCollaborator", 'String'>
  readonly documentId: Prisma.FieldRef<"DocumentCollaborator", 'String'>
  readonly userId: Prisma.FieldRef<"DocumentCollaborator", 'String'>
  readonly role: Prisma.FieldRef<"DocumentCollaborator", 'String'>
  readonly invitedAt: Prisma.FieldRef<"DocumentCollaborator", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DocumentCollaborator findUnique
 */
export type DocumentCollaboratorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * Filter, which DocumentCollaborator to fetch.
   */
  where: Prisma.DocumentCollaboratorWhereUniqueInput
}

/**
 * DocumentCollaborator findUniqueOrThrow
 */
export type DocumentCollaboratorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * Filter, which DocumentCollaborator to fetch.
   */
  where: Prisma.DocumentCollaboratorWhereUniqueInput
}

/**
 * DocumentCollaborator findFirst
 */
export type DocumentCollaboratorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * Filter, which DocumentCollaborator to fetch.
   */
  where?: Prisma.DocumentCollaboratorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentCollaborators to fetch.
   */
  orderBy?: Prisma.DocumentCollaboratorOrderByWithRelationInput | Prisma.DocumentCollaboratorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentCollaborators.
   */
  cursor?: Prisma.DocumentCollaboratorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentCollaborators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentCollaborators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentCollaborators.
   */
  distinct?: Prisma.DocumentCollaboratorScalarFieldEnum | Prisma.DocumentCollaboratorScalarFieldEnum[]
}

/**
 * DocumentCollaborator findFirstOrThrow
 */
export type DocumentCollaboratorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * Filter, which DocumentCollaborator to fetch.
   */
  where?: Prisma.DocumentCollaboratorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentCollaborators to fetch.
   */
  orderBy?: Prisma.DocumentCollaboratorOrderByWithRelationInput | Prisma.DocumentCollaboratorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentCollaborators.
   */
  cursor?: Prisma.DocumentCollaboratorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentCollaborators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentCollaborators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentCollaborators.
   */
  distinct?: Prisma.DocumentCollaboratorScalarFieldEnum | Prisma.DocumentCollaboratorScalarFieldEnum[]
}

/**
 * DocumentCollaborator findMany
 */
export type DocumentCollaboratorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * Filter, which DocumentCollaborators to fetch.
   */
  where?: Prisma.DocumentCollaboratorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentCollaborators to fetch.
   */
  orderBy?: Prisma.DocumentCollaboratorOrderByWithRelationInput | Prisma.DocumentCollaboratorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DocumentCollaborators.
   */
  cursor?: Prisma.DocumentCollaboratorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentCollaborators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentCollaborators.
   */
  skip?: number
  distinct?: Prisma.DocumentCollaboratorScalarFieldEnum | Prisma.DocumentCollaboratorScalarFieldEnum[]
}

/**
 * DocumentCollaborator create
 */
export type DocumentCollaboratorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * The data needed to create a DocumentCollaborator.
   */
  data: Prisma.XOR<Prisma.DocumentCollaboratorCreateInput, Prisma.DocumentCollaboratorUncheckedCreateInput>
}

/**
 * DocumentCollaborator createMany
 */
export type DocumentCollaboratorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DocumentCollaborators.
   */
  data: Prisma.DocumentCollaboratorCreateManyInput | Prisma.DocumentCollaboratorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DocumentCollaborator createManyAndReturn
 */
export type DocumentCollaboratorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * The data used to create many DocumentCollaborators.
   */
  data: Prisma.DocumentCollaboratorCreateManyInput | Prisma.DocumentCollaboratorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentCollaborator update
 */
export type DocumentCollaboratorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * The data needed to update a DocumentCollaborator.
   */
  data: Prisma.XOR<Prisma.DocumentCollaboratorUpdateInput, Prisma.DocumentCollaboratorUncheckedUpdateInput>
  /**
   * Choose, which DocumentCollaborator to update.
   */
  where: Prisma.DocumentCollaboratorWhereUniqueInput
}

/**
 * DocumentCollaborator updateMany
 */
export type DocumentCollaboratorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DocumentCollaborators.
   */
  data: Prisma.XOR<Prisma.DocumentCollaboratorUpdateManyMutationInput, Prisma.DocumentCollaboratorUncheckedUpdateManyInput>
  /**
   * Filter which DocumentCollaborators to update
   */
  where?: Prisma.DocumentCollaboratorWhereInput
  /**
   * Limit how many DocumentCollaborators to update.
   */
  limit?: number
}

/**
 * DocumentCollaborator updateManyAndReturn
 */
export type DocumentCollaboratorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * The data used to update DocumentCollaborators.
   */
  data: Prisma.XOR<Prisma.DocumentCollaboratorUpdateManyMutationInput, Prisma.DocumentCollaboratorUncheckedUpdateManyInput>
  /**
   * Filter which DocumentCollaborators to update
   */
  where?: Prisma.DocumentCollaboratorWhereInput
  /**
   * Limit how many DocumentCollaborators to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentCollaborator upsert
 */
export type DocumentCollaboratorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * The filter to search for the DocumentCollaborator to update in case it exists.
   */
  where: Prisma.DocumentCollaboratorWhereUniqueInput
  /**
   * In case the DocumentCollaborator found by the `where` argument doesn't exist, create a new DocumentCollaborator with this data.
   */
  create: Prisma.XOR<Prisma.DocumentCollaboratorCreateInput, Prisma.DocumentCollaboratorUncheckedCreateInput>
  /**
   * In case the DocumentCollaborator was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DocumentCollaboratorUpdateInput, Prisma.DocumentCollaboratorUncheckedUpdateInput>
}

/**
 * DocumentCollaborator delete
 */
export type DocumentCollaboratorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
  /**
   * Filter which DocumentCollaborator to delete.
   */
  where: Prisma.DocumentCollaboratorWhereUniqueInput
}

/**
 * DocumentCollaborator deleteMany
 */
export type DocumentCollaboratorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentCollaborators to delete
   */
  where?: Prisma.DocumentCollaboratorWhereInput
  /**
   * Limit how many DocumentCollaborators to delete.
   */
  limit?: number
}

/**
 * DocumentCollaborator without action
 */
export type DocumentCollaboratorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentCollaborator
   */
  select?: Prisma.DocumentCollaboratorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentCollaborator
   */
  omit?: Prisma.DocumentCollaboratorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentCollaboratorInclude<ExtArgs> | null
}
