
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DocumentVersion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DocumentVersion
 * 
 */
export type DocumentVersionModel = runtime.Types.Result.DefaultSelection<Prisma.$DocumentVersionPayload>

export type AggregateDocumentVersion = {
  _count: DocumentVersionCountAggregateOutputType | null
  _avg: DocumentVersionAvgAggregateOutputType | null
  _sum: DocumentVersionSumAggregateOutputType | null
  _min: DocumentVersionMinAggregateOutputType | null
  _max: DocumentVersionMaxAggregateOutputType | null
}

export type DocumentVersionAvgAggregateOutputType = {
  versionNumber: number | null
}

export type DocumentVersionSumAggregateOutputType = {
  versionNumber: number | null
}

export type DocumentVersionMinAggregateOutputType = {
  id: string | null
  documentId: string | null
  versionNumber: number | null
  fileUrl: string | null
  createdAt: Date | null
}

export type DocumentVersionMaxAggregateOutputType = {
  id: string | null
  documentId: string | null
  versionNumber: number | null
  fileUrl: string | null
  createdAt: Date | null
}

export type DocumentVersionCountAggregateOutputType = {
  id: number
  documentId: number
  versionNumber: number
  fileUrl: number
  createdAt: number
  _all: number
}


export type DocumentVersionAvgAggregateInputType = {
  versionNumber?: true
}

export type DocumentVersionSumAggregateInputType = {
  versionNumber?: true
}

export type DocumentVersionMinAggregateInputType = {
  id?: true
  documentId?: true
  versionNumber?: true
  fileUrl?: true
  createdAt?: true
}

export type DocumentVersionMaxAggregateInputType = {
  id?: true
  documentId?: true
  versionNumber?: true
  fileUrl?: true
  createdAt?: true
}

export type DocumentVersionCountAggregateInputType = {
  id?: true
  documentId?: true
  versionNumber?: true
  fileUrl?: true
  createdAt?: true
  _all?: true
}

export type DocumentVersionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentVersion to aggregate.
   */
  where?: Prisma.DocumentVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentVersions to fetch.
   */
  orderBy?: Prisma.DocumentVersionOrderByWithRelationInput | Prisma.DocumentVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DocumentVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DocumentVersions
  **/
  _count?: true | DocumentVersionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DocumentVersionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DocumentVersionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DocumentVersionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DocumentVersionMaxAggregateInputType
}

export type GetDocumentVersionAggregateType<T extends DocumentVersionAggregateArgs> = {
      [P in keyof T & keyof AggregateDocumentVersion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocumentVersion[P]>
    : Prisma.GetScalarType<T[P], AggregateDocumentVersion[P]>
}




export type DocumentVersionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentVersionWhereInput
  orderBy?: Prisma.DocumentVersionOrderByWithAggregationInput | Prisma.DocumentVersionOrderByWithAggregationInput[]
  by: Prisma.DocumentVersionScalarFieldEnum[] | Prisma.DocumentVersionScalarFieldEnum
  having?: Prisma.DocumentVersionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DocumentVersionCountAggregateInputType | true
  _avg?: DocumentVersionAvgAggregateInputType
  _sum?: DocumentVersionSumAggregateInputType
  _min?: DocumentVersionMinAggregateInputType
  _max?: DocumentVersionMaxAggregateInputType
}

export type DocumentVersionGroupByOutputType = {
  id: string
  documentId: string
  versionNumber: number
  fileUrl: string
  createdAt: Date
  _count: DocumentVersionCountAggregateOutputType | null
  _avg: DocumentVersionAvgAggregateOutputType | null
  _sum: DocumentVersionSumAggregateOutputType | null
  _min: DocumentVersionMinAggregateOutputType | null
  _max: DocumentVersionMaxAggregateOutputType | null
}

type GetDocumentVersionGroupByPayload<T extends DocumentVersionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DocumentVersionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DocumentVersionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentVersionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentVersionGroupByOutputType[P]>
      }
    >
  >



export type DocumentVersionWhereInput = {
  AND?: Prisma.DocumentVersionWhereInput | Prisma.DocumentVersionWhereInput[]
  OR?: Prisma.DocumentVersionWhereInput[]
  NOT?: Prisma.DocumentVersionWhereInput | Prisma.DocumentVersionWhereInput[]
  id?: Prisma.StringFilter<"DocumentVersion"> | string
  documentId?: Prisma.StringFilter<"DocumentVersion"> | string
  versionNumber?: Prisma.IntFilter<"DocumentVersion"> | number
  fileUrl?: Prisma.StringFilter<"DocumentVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"DocumentVersion"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}

export type DocumentVersionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  versionNumber?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  document?: Prisma.DocumentOrderByWithRelationInput
}

export type DocumentVersionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DocumentVersionWhereInput | Prisma.DocumentVersionWhereInput[]
  OR?: Prisma.DocumentVersionWhereInput[]
  NOT?: Prisma.DocumentVersionWhereInput | Prisma.DocumentVersionWhereInput[]
  documentId?: Prisma.StringFilter<"DocumentVersion"> | string
  versionNumber?: Prisma.IntFilter<"DocumentVersion"> | number
  fileUrl?: Prisma.StringFilter<"DocumentVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"DocumentVersion"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}, "id">

export type DocumentVersionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  versionNumber?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.DocumentVersionCountOrderByAggregateInput
  _avg?: Prisma.DocumentVersionAvgOrderByAggregateInput
  _max?: Prisma.DocumentVersionMaxOrderByAggregateInput
  _min?: Prisma.DocumentVersionMinOrderByAggregateInput
  _sum?: Prisma.DocumentVersionSumOrderByAggregateInput
}

export type DocumentVersionScalarWhereWithAggregatesInput = {
  AND?: Prisma.DocumentVersionScalarWhereWithAggregatesInput | Prisma.DocumentVersionScalarWhereWithAggregatesInput[]
  OR?: Prisma.DocumentVersionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DocumentVersionScalarWhereWithAggregatesInput | Prisma.DocumentVersionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DocumentVersion"> | string
  documentId?: Prisma.StringWithAggregatesFilter<"DocumentVersion"> | string
  versionNumber?: Prisma.IntWithAggregatesFilter<"DocumentVersion"> | number
  fileUrl?: Prisma.StringWithAggregatesFilter<"DocumentVersion"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DocumentVersion"> | Date | string
}

export type DocumentVersionCreateInput = {
  id?: string
  versionNumber: number
  fileUrl: string
  createdAt?: Date | string
  document: Prisma.DocumentCreateNestedOneWithoutVersionsInput
}

export type DocumentVersionUncheckedCreateInput = {
  id?: string
  documentId: string
  versionNumber: number
  fileUrl: string
  createdAt?: Date | string
}

export type DocumentVersionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNumber?: Prisma.IntFieldUpdateOperationsInput | number
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutVersionsNestedInput
}

export type DocumentVersionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  versionNumber?: Prisma.IntFieldUpdateOperationsInput | number
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentVersionCreateManyInput = {
  id?: string
  documentId: string
  versionNumber: number
  fileUrl: string
  createdAt?: Date | string
}

export type DocumentVersionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNumber?: Prisma.IntFieldUpdateOperationsInput | number
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentVersionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  versionNumber?: Prisma.IntFieldUpdateOperationsInput | number
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentVersionListRelationFilter = {
  every?: Prisma.DocumentVersionWhereInput
  some?: Prisma.DocumentVersionWhereInput
  none?: Prisma.DocumentVersionWhereInput
}

export type DocumentVersionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DocumentVersionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  versionNumber?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DocumentVersionAvgOrderByAggregateInput = {
  versionNumber?: Prisma.SortOrder
}

export type DocumentVersionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  versionNumber?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DocumentVersionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  versionNumber?: Prisma.SortOrder
  fileUrl?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type DocumentVersionSumOrderByAggregateInput = {
  versionNumber?: Prisma.SortOrder
}

export type DocumentVersionCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.DocumentVersionCreateWithoutDocumentInput, Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput> | Prisma.DocumentVersionCreateWithoutDocumentInput[] | Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput | Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.DocumentVersionCreateManyDocumentInputEnvelope
  connect?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
}

export type DocumentVersionUncheckedCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.DocumentVersionCreateWithoutDocumentInput, Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput> | Prisma.DocumentVersionCreateWithoutDocumentInput[] | Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput | Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.DocumentVersionCreateManyDocumentInputEnvelope
  connect?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
}

export type DocumentVersionUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentVersionCreateWithoutDocumentInput, Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput> | Prisma.DocumentVersionCreateWithoutDocumentInput[] | Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput | Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.DocumentVersionUpsertWithWhereUniqueWithoutDocumentInput | Prisma.DocumentVersionUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.DocumentVersionCreateManyDocumentInputEnvelope
  set?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  disconnect?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  delete?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  connect?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  update?: Prisma.DocumentVersionUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentVersionUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentVersionUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentVersionUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentVersionScalarWhereInput | Prisma.DocumentVersionScalarWhereInput[]
}

export type DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentVersionCreateWithoutDocumentInput, Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput> | Prisma.DocumentVersionCreateWithoutDocumentInput[] | Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput | Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.DocumentVersionUpsertWithWhereUniqueWithoutDocumentInput | Prisma.DocumentVersionUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.DocumentVersionCreateManyDocumentInputEnvelope
  set?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  disconnect?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  delete?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  connect?: Prisma.DocumentVersionWhereUniqueInput | Prisma.DocumentVersionWhereUniqueInput[]
  update?: Prisma.DocumentVersionUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentVersionUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentVersionUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentVersionUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentVersionScalarWhereInput | Prisma.DocumentVersionScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DocumentVersionCreateWithoutDocumentInput = {
  id?: string
  versionNumber: number
  fileUrl: string
  createdAt?: Date | string
}

export type DocumentVersionUncheckedCreateWithoutDocumentInput = {
  id?: string
  versionNumber: number
  fileUrl: string
  createdAt?: Date | string
}

export type DocumentVersionCreateOrConnectWithoutDocumentInput = {
  where: Prisma.DocumentVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentVersionCreateWithoutDocumentInput, Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput>
}

export type DocumentVersionCreateManyDocumentInputEnvelope = {
  data: Prisma.DocumentVersionCreateManyDocumentInput | Prisma.DocumentVersionCreateManyDocumentInput[]
  skipDuplicates?: boolean
}

export type DocumentVersionUpsertWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.DocumentVersionWhereUniqueInput
  update: Prisma.XOR<Prisma.DocumentVersionUpdateWithoutDocumentInput, Prisma.DocumentVersionUncheckedUpdateWithoutDocumentInput>
  create: Prisma.XOR<Prisma.DocumentVersionCreateWithoutDocumentInput, Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput>
}

export type DocumentVersionUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.DocumentVersionWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentVersionUpdateWithoutDocumentInput, Prisma.DocumentVersionUncheckedUpdateWithoutDocumentInput>
}

export type DocumentVersionUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.DocumentVersionScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentVersionUpdateManyMutationInput, Prisma.DocumentVersionUncheckedUpdateManyWithoutDocumentInput>
}

export type DocumentVersionScalarWhereInput = {
  AND?: Prisma.DocumentVersionScalarWhereInput | Prisma.DocumentVersionScalarWhereInput[]
  OR?: Prisma.DocumentVersionScalarWhereInput[]
  NOT?: Prisma.DocumentVersionScalarWhereInput | Prisma.DocumentVersionScalarWhereInput[]
  id?: Prisma.StringFilter<"DocumentVersion"> | string
  documentId?: Prisma.StringFilter<"DocumentVersion"> | string
  versionNumber?: Prisma.IntFilter<"DocumentVersion"> | number
  fileUrl?: Prisma.StringFilter<"DocumentVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"DocumentVersion"> | Date | string
}

export type DocumentVersionCreateManyDocumentInput = {
  id?: string
  versionNumber: number
  fileUrl: string
  createdAt?: Date | string
}

export type DocumentVersionUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNumber?: Prisma.IntFieldUpdateOperationsInput | number
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentVersionUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNumber?: Prisma.IntFieldUpdateOperationsInput | number
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentVersionUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  versionNumber?: Prisma.IntFieldUpdateOperationsInput | number
  fileUrl?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DocumentVersionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  versionNumber?: boolean
  fileUrl?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentVersion"]>

export type DocumentVersionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  versionNumber?: boolean
  fileUrl?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentVersion"]>

export type DocumentVersionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  versionNumber?: boolean
  fileUrl?: boolean
  createdAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentVersion"]>

export type DocumentVersionSelectScalar = {
  id?: boolean
  documentId?: boolean
  versionNumber?: boolean
  fileUrl?: boolean
  createdAt?: boolean
}

export type DocumentVersionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "documentId" | "versionNumber" | "fileUrl" | "createdAt", ExtArgs["result"]["documentVersion"]>
export type DocumentVersionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type DocumentVersionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type DocumentVersionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}

export type $DocumentVersionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DocumentVersion"
  objects: {
    document: Prisma.$DocumentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    documentId: string
    versionNumber: number
    fileUrl: string
    createdAt: Date
  }, ExtArgs["result"]["documentVersion"]>
  composites: {}
}

export type DocumentVersionGetPayload<S extends boolean | null | undefined | DocumentVersionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload, S>

export type DocumentVersionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DocumentVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DocumentVersionCountAggregateInputType | true
  }

export interface DocumentVersionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentVersion'], meta: { name: 'DocumentVersion' } }
  /**
   * Find zero or one DocumentVersion that matches the filter.
   * @param {DocumentVersionFindUniqueArgs} args - Arguments to find a DocumentVersion
   * @example
   * // Get one DocumentVersion
   * const documentVersion = await prisma.documentVersion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentVersionFindUniqueArgs>(args: Prisma.SelectSubset<T, DocumentVersionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DocumentVersion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentVersionFindUniqueOrThrowArgs} args - Arguments to find a DocumentVersion
   * @example
   * // Get one DocumentVersion
   * const documentVersion = await prisma.documentVersion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentVersionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DocumentVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentVersion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentVersionFindFirstArgs} args - Arguments to find a DocumentVersion
   * @example
   * // Get one DocumentVersion
   * const documentVersion = await prisma.documentVersion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentVersionFindFirstArgs>(args?: Prisma.SelectSubset<T, DocumentVersionFindFirstArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentVersion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentVersionFindFirstOrThrowArgs} args - Arguments to find a DocumentVersion
   * @example
   * // Get one DocumentVersion
   * const documentVersion = await prisma.documentVersion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentVersionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DocumentVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DocumentVersions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentVersionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DocumentVersions
   * const documentVersions = await prisma.documentVersion.findMany()
   * 
   * // Get first 10 DocumentVersions
   * const documentVersions = await prisma.documentVersion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const documentVersionWithIdOnly = await prisma.documentVersion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DocumentVersionFindManyArgs>(args?: Prisma.SelectSubset<T, DocumentVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DocumentVersion.
   * @param {DocumentVersionCreateArgs} args - Arguments to create a DocumentVersion.
   * @example
   * // Create one DocumentVersion
   * const DocumentVersion = await prisma.documentVersion.create({
   *   data: {
   *     // ... data to create a DocumentVersion
   *   }
   * })
   * 
   */
  create<T extends DocumentVersionCreateArgs>(args: Prisma.SelectSubset<T, DocumentVersionCreateArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DocumentVersions.
   * @param {DocumentVersionCreateManyArgs} args - Arguments to create many DocumentVersions.
   * @example
   * // Create many DocumentVersions
   * const documentVersion = await prisma.documentVersion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DocumentVersionCreateManyArgs>(args?: Prisma.SelectSubset<T, DocumentVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DocumentVersions and returns the data saved in the database.
   * @param {DocumentVersionCreateManyAndReturnArgs} args - Arguments to create many DocumentVersions.
   * @example
   * // Create many DocumentVersions
   * const documentVersion = await prisma.documentVersion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DocumentVersions and only return the `id`
   * const documentVersionWithIdOnly = await prisma.documentVersion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DocumentVersionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DocumentVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DocumentVersion.
   * @param {DocumentVersionDeleteArgs} args - Arguments to delete one DocumentVersion.
   * @example
   * // Delete one DocumentVersion
   * const DocumentVersion = await prisma.documentVersion.delete({
   *   where: {
   *     // ... filter to delete one DocumentVersion
   *   }
   * })
   * 
   */
  delete<T extends DocumentVersionDeleteArgs>(args: Prisma.SelectSubset<T, DocumentVersionDeleteArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DocumentVersion.
   * @param {DocumentVersionUpdateArgs} args - Arguments to update one DocumentVersion.
   * @example
   * // Update one DocumentVersion
   * const documentVersion = await prisma.documentVersion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DocumentVersionUpdateArgs>(args: Prisma.SelectSubset<T, DocumentVersionUpdateArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DocumentVersions.
   * @param {DocumentVersionDeleteManyArgs} args - Arguments to filter DocumentVersions to delete.
   * @example
   * // Delete a few DocumentVersions
   * const { count } = await prisma.documentVersion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DocumentVersionDeleteManyArgs>(args?: Prisma.SelectSubset<T, DocumentVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentVersionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DocumentVersions
   * const documentVersion = await prisma.documentVersion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DocumentVersionUpdateManyArgs>(args: Prisma.SelectSubset<T, DocumentVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentVersions and returns the data updated in the database.
   * @param {DocumentVersionUpdateManyAndReturnArgs} args - Arguments to update many DocumentVersions.
   * @example
   * // Update many DocumentVersions
   * const documentVersion = await prisma.documentVersion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DocumentVersions and only return the `id`
   * const documentVersionWithIdOnly = await prisma.documentVersion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DocumentVersionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DocumentVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DocumentVersion.
   * @param {DocumentVersionUpsertArgs} args - Arguments to update or create a DocumentVersion.
   * @example
   * // Update or create a DocumentVersion
   * const documentVersion = await prisma.documentVersion.upsert({
   *   create: {
   *     // ... data to create a DocumentVersion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DocumentVersion we want to update
   *   }
   * })
   */
  upsert<T extends DocumentVersionUpsertArgs>(args: Prisma.SelectSubset<T, DocumentVersionUpsertArgs<ExtArgs>>): Prisma.Prisma__DocumentVersionClient<runtime.Types.Result.GetResult<Prisma.$DocumentVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DocumentVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentVersionCountArgs} args - Arguments to filter DocumentVersions to count.
   * @example
   * // Count the number of DocumentVersions
   * const count = await prisma.documentVersion.count({
   *   where: {
   *     // ... the filter for the DocumentVersions we want to count
   *   }
   * })
  **/
  count<T extends DocumentVersionCountArgs>(
    args?: Prisma.Subset<T, DocumentVersionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DocumentVersionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DocumentVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DocumentVersionAggregateArgs>(args: Prisma.Subset<T, DocumentVersionAggregateArgs>): Prisma.PrismaPromise<GetDocumentVersionAggregateType<T>>

  /**
   * Group by DocumentVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentVersionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DocumentVersionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentVersionGroupByArgs['orderBy'] }
      : { orderBy?: DocumentVersionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DocumentVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DocumentVersion model
 */
readonly fields: DocumentVersionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DocumentVersion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentVersionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DocumentVersion model
 */
export interface DocumentVersionFieldRefs {
  readonly id: Prisma.FieldRef<"DocumentVersion", 'String'>
  readonly documentId: Prisma.FieldRef<"DocumentVersion", 'String'>
  readonly versionNumber: Prisma.FieldRef<"DocumentVersion", 'Int'>
  readonly fileUrl: Prisma.FieldRef<"DocumentVersion", 'String'>
  readonly createdAt: Prisma.FieldRef<"DocumentVersion", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DocumentVersion findUnique
 */
export type DocumentVersionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * Filter, which DocumentVersion to fetch.
   */
  where: Prisma.DocumentVersionWhereUniqueInput
}

/**
 * DocumentVersion findUniqueOrThrow
 */
export type DocumentVersionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * Filter, which DocumentVersion to fetch.
   */
  where: Prisma.DocumentVersionWhereUniqueInput
}

/**
 * DocumentVersion findFirst
 */
export type DocumentVersionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * Filter, which DocumentVersion to fetch.
   */
  where?: Prisma.DocumentVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentVersions to fetch.
   */
  orderBy?: Prisma.DocumentVersionOrderByWithRelationInput | Prisma.DocumentVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentVersions.
   */
  cursor?: Prisma.DocumentVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentVersions.
   */
  distinct?: Prisma.DocumentVersionScalarFieldEnum | Prisma.DocumentVersionScalarFieldEnum[]
}

/**
 * DocumentVersion findFirstOrThrow
 */
export type DocumentVersionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * Filter, which DocumentVersion to fetch.
   */
  where?: Prisma.DocumentVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentVersions to fetch.
   */
  orderBy?: Prisma.DocumentVersionOrderByWithRelationInput | Prisma.DocumentVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentVersions.
   */
  cursor?: Prisma.DocumentVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentVersions.
   */
  distinct?: Prisma.DocumentVersionScalarFieldEnum | Prisma.DocumentVersionScalarFieldEnum[]
}

/**
 * DocumentVersion findMany
 */
export type DocumentVersionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * Filter, which DocumentVersions to fetch.
   */
  where?: Prisma.DocumentVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentVersions to fetch.
   */
  orderBy?: Prisma.DocumentVersionOrderByWithRelationInput | Prisma.DocumentVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DocumentVersions.
   */
  cursor?: Prisma.DocumentVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentVersions.
   */
  skip?: number
  distinct?: Prisma.DocumentVersionScalarFieldEnum | Prisma.DocumentVersionScalarFieldEnum[]
}

/**
 * DocumentVersion create
 */
export type DocumentVersionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * The data needed to create a DocumentVersion.
   */
  data: Prisma.XOR<Prisma.DocumentVersionCreateInput, Prisma.DocumentVersionUncheckedCreateInput>
}

/**
 * DocumentVersion createMany
 */
export type DocumentVersionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DocumentVersions.
   */
  data: Prisma.DocumentVersionCreateManyInput | Prisma.DocumentVersionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DocumentVersion createManyAndReturn
 */
export type DocumentVersionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * The data used to create many DocumentVersions.
   */
  data: Prisma.DocumentVersionCreateManyInput | Prisma.DocumentVersionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentVersion update
 */
export type DocumentVersionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * The data needed to update a DocumentVersion.
   */
  data: Prisma.XOR<Prisma.DocumentVersionUpdateInput, Prisma.DocumentVersionUncheckedUpdateInput>
  /**
   * Choose, which DocumentVersion to update.
   */
  where: Prisma.DocumentVersionWhereUniqueInput
}

/**
 * DocumentVersion updateMany
 */
export type DocumentVersionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DocumentVersions.
   */
  data: Prisma.XOR<Prisma.DocumentVersionUpdateManyMutationInput, Prisma.DocumentVersionUncheckedUpdateManyInput>
  /**
   * Filter which DocumentVersions to update
   */
  where?: Prisma.DocumentVersionWhereInput
  /**
   * Limit how many DocumentVersions to update.
   */
  limit?: number
}

/**
 * DocumentVersion updateManyAndReturn
 */
export type DocumentVersionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * The data used to update DocumentVersions.
   */
  data: Prisma.XOR<Prisma.DocumentVersionUpdateManyMutationInput, Prisma.DocumentVersionUncheckedUpdateManyInput>
  /**
   * Filter which DocumentVersions to update
   */
  where?: Prisma.DocumentVersionWhereInput
  /**
   * Limit how many DocumentVersions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentVersion upsert
 */
export type DocumentVersionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * The filter to search for the DocumentVersion to update in case it exists.
   */
  where: Prisma.DocumentVersionWhereUniqueInput
  /**
   * In case the DocumentVersion found by the `where` argument doesn't exist, create a new DocumentVersion with this data.
   */
  create: Prisma.XOR<Prisma.DocumentVersionCreateInput, Prisma.DocumentVersionUncheckedCreateInput>
  /**
   * In case the DocumentVersion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DocumentVersionUpdateInput, Prisma.DocumentVersionUncheckedUpdateInput>
}

/**
 * DocumentVersion delete
 */
export type DocumentVersionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
  /**
   * Filter which DocumentVersion to delete.
   */
  where: Prisma.DocumentVersionWhereUniqueInput
}

/**
 * DocumentVersion deleteMany
 */
export type DocumentVersionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentVersions to delete
   */
  where?: Prisma.DocumentVersionWhereInput
  /**
   * Limit how many DocumentVersions to delete.
   */
  limit?: number
}

/**
 * DocumentVersion without action
 */
export type DocumentVersionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentVersion
   */
  select?: Prisma.DocumentVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentVersion
   */
  omit?: Prisma.DocumentVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentVersionInclude<ExtArgs> | null
}
