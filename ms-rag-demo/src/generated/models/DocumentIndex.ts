
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `DocumentIndex` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DocumentIndex
 * 
 */
export type DocumentIndexModel = runtime.Types.Result.DefaultSelection<Prisma.$DocumentIndexPayload>

export type AggregateDocumentIndex = {
  _count: DocumentIndexCountAggregateOutputType | null
  _min: DocumentIndexMinAggregateOutputType | null
  _max: DocumentIndexMaxAggregateOutputType | null
}

export type DocumentIndexMinAggregateOutputType = {
  id: string | null
  documentId: string | null
  title: string | null
  indexText: string | null
  generatedBy: string | null
  generatedAt: Date | null
  updatedAt: Date | null
}

export type DocumentIndexMaxAggregateOutputType = {
  id: string | null
  documentId: string | null
  title: string | null
  indexText: string | null
  generatedBy: string | null
  generatedAt: Date | null
  updatedAt: Date | null
}

export type DocumentIndexCountAggregateOutputType = {
  id: number
  documentId: number
  title: number
  indexText: number
  indexJson: number
  generatedBy: number
  generatedAt: number
  updatedAt: number
  _all: number
}


export type DocumentIndexMinAggregateInputType = {
  id?: true
  documentId?: true
  title?: true
  indexText?: true
  generatedBy?: true
  generatedAt?: true
  updatedAt?: true
}

export type DocumentIndexMaxAggregateInputType = {
  id?: true
  documentId?: true
  title?: true
  indexText?: true
  generatedBy?: true
  generatedAt?: true
  updatedAt?: true
}

export type DocumentIndexCountAggregateInputType = {
  id?: true
  documentId?: true
  title?: true
  indexText?: true
  indexJson?: true
  generatedBy?: true
  generatedAt?: true
  updatedAt?: true
  _all?: true
}

export type DocumentIndexAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentIndex to aggregate.
   */
  where?: Prisma.DocumentIndexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentIndices to fetch.
   */
  orderBy?: Prisma.DocumentIndexOrderByWithRelationInput | Prisma.DocumentIndexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DocumentIndexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentIndices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentIndices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DocumentIndices
  **/
  _count?: true | DocumentIndexCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DocumentIndexMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DocumentIndexMaxAggregateInputType
}

export type GetDocumentIndexAggregateType<T extends DocumentIndexAggregateArgs> = {
      [P in keyof T & keyof AggregateDocumentIndex]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocumentIndex[P]>
    : Prisma.GetScalarType<T[P], AggregateDocumentIndex[P]>
}




export type DocumentIndexGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentIndexWhereInput
  orderBy?: Prisma.DocumentIndexOrderByWithAggregationInput | Prisma.DocumentIndexOrderByWithAggregationInput[]
  by: Prisma.DocumentIndexScalarFieldEnum[] | Prisma.DocumentIndexScalarFieldEnum
  having?: Prisma.DocumentIndexScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DocumentIndexCountAggregateInputType | true
  _min?: DocumentIndexMinAggregateInputType
  _max?: DocumentIndexMaxAggregateInputType
}

export type DocumentIndexGroupByOutputType = {
  id: string
  documentId: string
  title: string | null
  indexText: string
  indexJson: runtime.JsonValue | null
  generatedBy: string | null
  generatedAt: Date
  updatedAt: Date
  _count: DocumentIndexCountAggregateOutputType | null
  _min: DocumentIndexMinAggregateOutputType | null
  _max: DocumentIndexMaxAggregateOutputType | null
}

type GetDocumentIndexGroupByPayload<T extends DocumentIndexGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DocumentIndexGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DocumentIndexGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentIndexGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentIndexGroupByOutputType[P]>
      }
    >
  >



export type DocumentIndexWhereInput = {
  AND?: Prisma.DocumentIndexWhereInput | Prisma.DocumentIndexWhereInput[]
  OR?: Prisma.DocumentIndexWhereInput[]
  NOT?: Prisma.DocumentIndexWhereInput | Prisma.DocumentIndexWhereInput[]
  id?: Prisma.StringFilter<"DocumentIndex"> | string
  documentId?: Prisma.StringFilter<"DocumentIndex"> | string
  title?: Prisma.StringNullableFilter<"DocumentIndex"> | string | null
  indexText?: Prisma.StringFilter<"DocumentIndex"> | string
  indexJson?: Prisma.JsonNullableFilter<"DocumentIndex">
  generatedBy?: Prisma.StringNullableFilter<"DocumentIndex"> | string | null
  generatedAt?: Prisma.DateTimeFilter<"DocumentIndex"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DocumentIndex"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}

export type DocumentIndexOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  indexText?: Prisma.SortOrder
  indexJson?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  document?: Prisma.DocumentOrderByWithRelationInput
}

export type DocumentIndexWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DocumentIndexWhereInput | Prisma.DocumentIndexWhereInput[]
  OR?: Prisma.DocumentIndexWhereInput[]
  NOT?: Prisma.DocumentIndexWhereInput | Prisma.DocumentIndexWhereInput[]
  documentId?: Prisma.StringFilter<"DocumentIndex"> | string
  title?: Prisma.StringNullableFilter<"DocumentIndex"> | string | null
  indexText?: Prisma.StringFilter<"DocumentIndex"> | string
  indexJson?: Prisma.JsonNullableFilter<"DocumentIndex">
  generatedBy?: Prisma.StringNullableFilter<"DocumentIndex"> | string | null
  generatedAt?: Prisma.DateTimeFilter<"DocumentIndex"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DocumentIndex"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentScalarRelationFilter, Prisma.DocumentWhereInput>
}, "id">

export type DocumentIndexOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  title?: Prisma.SortOrderInput | Prisma.SortOrder
  indexText?: Prisma.SortOrder
  indexJson?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DocumentIndexCountOrderByAggregateInput
  _max?: Prisma.DocumentIndexMaxOrderByAggregateInput
  _min?: Prisma.DocumentIndexMinOrderByAggregateInput
}

export type DocumentIndexScalarWhereWithAggregatesInput = {
  AND?: Prisma.DocumentIndexScalarWhereWithAggregatesInput | Prisma.DocumentIndexScalarWhereWithAggregatesInput[]
  OR?: Prisma.DocumentIndexScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DocumentIndexScalarWhereWithAggregatesInput | Prisma.DocumentIndexScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"DocumentIndex"> | string
  documentId?: Prisma.StringWithAggregatesFilter<"DocumentIndex"> | string
  title?: Prisma.StringNullableWithAggregatesFilter<"DocumentIndex"> | string | null
  indexText?: Prisma.StringWithAggregatesFilter<"DocumentIndex"> | string
  indexJson?: Prisma.JsonNullableWithAggregatesFilter<"DocumentIndex">
  generatedBy?: Prisma.StringNullableWithAggregatesFilter<"DocumentIndex"> | string | null
  generatedAt?: Prisma.DateTimeWithAggregatesFilter<"DocumentIndex"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DocumentIndex"> | Date | string
}

export type DocumentIndexUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexText?: Prisma.StringFieldUpdateOperationsInput | string
  indexJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  generatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentUpdateOneRequiredWithoutIndexesNestedInput
}

export type DocumentIndexUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexText?: Prisma.StringFieldUpdateOperationsInput | string
  indexJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  generatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentIndexUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexText?: Prisma.StringFieldUpdateOperationsInput | string
  indexJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  generatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentIndexUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexText?: Prisma.StringFieldUpdateOperationsInput | string
  indexJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  generatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentIndexListRelationFilter = {
  every?: Prisma.DocumentIndexWhereInput
  some?: Prisma.DocumentIndexWhereInput
  none?: Prisma.DocumentIndexWhereInput
}

export type DocumentIndexOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DocumentIndexCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  indexText?: Prisma.SortOrder
  indexJson?: Prisma.SortOrder
  generatedBy?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentIndexMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  indexText?: Prisma.SortOrder
  generatedBy?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentIndexMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  indexText?: Prisma.SortOrder
  generatedBy?: Prisma.SortOrder
  generatedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentIndexCreateNestedManyWithoutDocumentInput = {
  connect?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
}

export type DocumentIndexUncheckedCreateNestedManyWithoutDocumentInput = {
  connect?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
}

export type DocumentIndexUpdateManyWithoutDocumentNestedInput = {
  set?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  disconnect?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  delete?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  connect?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  update?: Prisma.DocumentIndexUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentIndexUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentIndexUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentIndexUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentIndexScalarWhereInput | Prisma.DocumentIndexScalarWhereInput[]
}

export type DocumentIndexUncheckedUpdateManyWithoutDocumentNestedInput = {
  set?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  disconnect?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  delete?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  connect?: Prisma.DocumentIndexWhereUniqueInput | Prisma.DocumentIndexWhereUniqueInput[]
  update?: Prisma.DocumentIndexUpdateWithWhereUniqueWithoutDocumentInput | Prisma.DocumentIndexUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.DocumentIndexUpdateManyWithWhereWithoutDocumentInput | Prisma.DocumentIndexUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.DocumentIndexScalarWhereInput | Prisma.DocumentIndexScalarWhereInput[]
}

export type DocumentIndexUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.DocumentIndexWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentIndexUpdateWithoutDocumentInput, Prisma.DocumentIndexUncheckedUpdateWithoutDocumentInput>
}

export type DocumentIndexUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.DocumentIndexScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentIndexUpdateManyMutationInput, Prisma.DocumentIndexUncheckedUpdateManyWithoutDocumentInput>
}

export type DocumentIndexScalarWhereInput = {
  AND?: Prisma.DocumentIndexScalarWhereInput | Prisma.DocumentIndexScalarWhereInput[]
  OR?: Prisma.DocumentIndexScalarWhereInput[]
  NOT?: Prisma.DocumentIndexScalarWhereInput | Prisma.DocumentIndexScalarWhereInput[]
  id?: Prisma.StringFilter<"DocumentIndex"> | string
  documentId?: Prisma.StringFilter<"DocumentIndex"> | string
  title?: Prisma.StringNullableFilter<"DocumentIndex"> | string | null
  indexText?: Prisma.StringFilter<"DocumentIndex"> | string
  indexJson?: Prisma.JsonNullableFilter<"DocumentIndex">
  generatedBy?: Prisma.StringNullableFilter<"DocumentIndex"> | string | null
  generatedAt?: Prisma.DateTimeFilter<"DocumentIndex"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DocumentIndex"> | Date | string
}

export type DocumentIndexUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexText?: Prisma.StringFieldUpdateOperationsInput | string
  indexJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  generatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentIndexUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexText?: Prisma.StringFieldUpdateOperationsInput | string
  indexJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  generatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentIndexUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  indexText?: Prisma.StringFieldUpdateOperationsInput | string
  indexJson?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  generatedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  generatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DocumentIndexSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  title?: boolean
  indexText?: boolean
  indexJson?: boolean
  generatedBy?: boolean
  generatedAt?: boolean
  updatedAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentIndex"]>


export type DocumentIndexSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  documentId?: boolean
  title?: boolean
  indexText?: boolean
  indexJson?: boolean
  generatedBy?: boolean
  generatedAt?: boolean
  updatedAt?: boolean
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documentIndex"]>

export type DocumentIndexSelectScalar = {
  id?: boolean
  documentId?: boolean
  title?: boolean
  indexText?: boolean
  indexJson?: boolean
  generatedBy?: boolean
  generatedAt?: boolean
  updatedAt?: boolean
}

export type DocumentIndexOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "documentId" | "title" | "indexText" | "indexJson" | "generatedBy" | "generatedAt" | "updatedAt", ExtArgs["result"]["documentIndex"]>
export type DocumentIndexInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}
export type DocumentIndexIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentDefaultArgs<ExtArgs>
}

export type $DocumentIndexPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DocumentIndex"
  objects: {
    document: Prisma.$DocumentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    documentId: string
    title: string | null
    indexText: string
    indexJson: runtime.JsonValue | null
    generatedBy: string | null
    generatedAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["documentIndex"]>
  composites: {}
}

export type DocumentIndexGetPayload<S extends boolean | null | undefined | DocumentIndexDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload, S>

export type DocumentIndexCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DocumentIndexFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DocumentIndexCountAggregateInputType | true
  }

export interface DocumentIndexDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentIndex'], meta: { name: 'DocumentIndex' } }
  /**
   * Find zero or one DocumentIndex that matches the filter.
   * @param {DocumentIndexFindUniqueArgs} args - Arguments to find a DocumentIndex
   * @example
   * // Get one DocumentIndex
   * const documentIndex = await prisma.documentIndex.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentIndexFindUniqueArgs>(args: Prisma.SelectSubset<T, DocumentIndexFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DocumentIndexClient<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DocumentIndex that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentIndexFindUniqueOrThrowArgs} args - Arguments to find a DocumentIndex
   * @example
   * // Get one DocumentIndex
   * const documentIndex = await prisma.documentIndex.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentIndexFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DocumentIndexFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentIndexClient<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentIndex that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentIndexFindFirstArgs} args - Arguments to find a DocumentIndex
   * @example
   * // Get one DocumentIndex
   * const documentIndex = await prisma.documentIndex.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentIndexFindFirstArgs>(args?: Prisma.SelectSubset<T, DocumentIndexFindFirstArgs<ExtArgs>>): Prisma.Prisma__DocumentIndexClient<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DocumentIndex that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentIndexFindFirstOrThrowArgs} args - Arguments to find a DocumentIndex
   * @example
   * // Get one DocumentIndex
   * const documentIndex = await prisma.documentIndex.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentIndexFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DocumentIndexFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentIndexClient<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DocumentIndices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentIndexFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DocumentIndices
   * const documentIndices = await prisma.documentIndex.findMany()
   * 
   * // Get first 10 DocumentIndices
   * const documentIndices = await prisma.documentIndex.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const documentIndexWithIdOnly = await prisma.documentIndex.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DocumentIndexFindManyArgs>(args?: Prisma.SelectSubset<T, DocumentIndexFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Delete a DocumentIndex.
   * @param {DocumentIndexDeleteArgs} args - Arguments to delete one DocumentIndex.
   * @example
   * // Delete one DocumentIndex
   * const DocumentIndex = await prisma.documentIndex.delete({
   *   where: {
   *     // ... filter to delete one DocumentIndex
   *   }
   * })
   * 
   */
  delete<T extends DocumentIndexDeleteArgs>(args: Prisma.SelectSubset<T, DocumentIndexDeleteArgs<ExtArgs>>): Prisma.Prisma__DocumentIndexClient<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DocumentIndex.
   * @param {DocumentIndexUpdateArgs} args - Arguments to update one DocumentIndex.
   * @example
   * // Update one DocumentIndex
   * const documentIndex = await prisma.documentIndex.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DocumentIndexUpdateArgs>(args: Prisma.SelectSubset<T, DocumentIndexUpdateArgs<ExtArgs>>): Prisma.Prisma__DocumentIndexClient<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DocumentIndices.
   * @param {DocumentIndexDeleteManyArgs} args - Arguments to filter DocumentIndices to delete.
   * @example
   * // Delete a few DocumentIndices
   * const { count } = await prisma.documentIndex.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DocumentIndexDeleteManyArgs>(args?: Prisma.SelectSubset<T, DocumentIndexDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentIndices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentIndexUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DocumentIndices
   * const documentIndex = await prisma.documentIndex.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DocumentIndexUpdateManyArgs>(args: Prisma.SelectSubset<T, DocumentIndexUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DocumentIndices and returns the data updated in the database.
   * @param {DocumentIndexUpdateManyAndReturnArgs} args - Arguments to update many DocumentIndices.
   * @example
   * // Update many DocumentIndices
   * const documentIndex = await prisma.documentIndex.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DocumentIndices and only return the `id`
   * const documentIndexWithIdOnly = await prisma.documentIndex.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DocumentIndexUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DocumentIndexUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentIndexPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>


  /**
   * Count the number of DocumentIndices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentIndexCountArgs} args - Arguments to filter DocumentIndices to count.
   * @example
   * // Count the number of DocumentIndices
   * const count = await prisma.documentIndex.count({
   *   where: {
   *     // ... the filter for the DocumentIndices we want to count
   *   }
   * })
  **/
  count<T extends DocumentIndexCountArgs>(
    args?: Prisma.Subset<T, DocumentIndexCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DocumentIndexCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DocumentIndex.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentIndexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DocumentIndexAggregateArgs>(args: Prisma.Subset<T, DocumentIndexAggregateArgs>): Prisma.PrismaPromise<GetDocumentIndexAggregateType<T>>

  /**
   * Group by DocumentIndex.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentIndexGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DocumentIndexGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentIndexGroupByArgs['orderBy'] }
      : { orderBy?: DocumentIndexGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DocumentIndexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentIndexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DocumentIndex model
 */
readonly fields: DocumentIndexFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DocumentIndex.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentIndexClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentClient<runtime.Types.Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DocumentIndex model
 */
export interface DocumentIndexFieldRefs {
  readonly id: Prisma.FieldRef<"DocumentIndex", 'String'>
  readonly documentId: Prisma.FieldRef<"DocumentIndex", 'String'>
  readonly title: Prisma.FieldRef<"DocumentIndex", 'String'>
  readonly indexText: Prisma.FieldRef<"DocumentIndex", 'String'>
  readonly indexJson: Prisma.FieldRef<"DocumentIndex", 'Json'>
  readonly generatedBy: Prisma.FieldRef<"DocumentIndex", 'String'>
  readonly generatedAt: Prisma.FieldRef<"DocumentIndex", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DocumentIndex", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DocumentIndex findUnique
 */
export type DocumentIndexFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
  /**
   * Filter, which DocumentIndex to fetch.
   */
  where: Prisma.DocumentIndexWhereUniqueInput
}

/**
 * DocumentIndex findUniqueOrThrow
 */
export type DocumentIndexFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
  /**
   * Filter, which DocumentIndex to fetch.
   */
  where: Prisma.DocumentIndexWhereUniqueInput
}

/**
 * DocumentIndex findFirst
 */
export type DocumentIndexFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
  /**
   * Filter, which DocumentIndex to fetch.
   */
  where?: Prisma.DocumentIndexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentIndices to fetch.
   */
  orderBy?: Prisma.DocumentIndexOrderByWithRelationInput | Prisma.DocumentIndexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentIndices.
   */
  cursor?: Prisma.DocumentIndexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentIndices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentIndices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentIndices.
   */
  distinct?: Prisma.DocumentIndexScalarFieldEnum | Prisma.DocumentIndexScalarFieldEnum[]
}

/**
 * DocumentIndex findFirstOrThrow
 */
export type DocumentIndexFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
  /**
   * Filter, which DocumentIndex to fetch.
   */
  where?: Prisma.DocumentIndexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentIndices to fetch.
   */
  orderBy?: Prisma.DocumentIndexOrderByWithRelationInput | Prisma.DocumentIndexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DocumentIndices.
   */
  cursor?: Prisma.DocumentIndexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentIndices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentIndices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DocumentIndices.
   */
  distinct?: Prisma.DocumentIndexScalarFieldEnum | Prisma.DocumentIndexScalarFieldEnum[]
}

/**
 * DocumentIndex findMany
 */
export type DocumentIndexFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
  /**
   * Filter, which DocumentIndices to fetch.
   */
  where?: Prisma.DocumentIndexWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DocumentIndices to fetch.
   */
  orderBy?: Prisma.DocumentIndexOrderByWithRelationInput | Prisma.DocumentIndexOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DocumentIndices.
   */
  cursor?: Prisma.DocumentIndexWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` DocumentIndices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DocumentIndices.
   */
  skip?: number
  distinct?: Prisma.DocumentIndexScalarFieldEnum | Prisma.DocumentIndexScalarFieldEnum[]
}

/**
 * DocumentIndex update
 */
export type DocumentIndexUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
  /**
   * The data needed to update a DocumentIndex.
   */
  data: Prisma.XOR<Prisma.DocumentIndexUpdateInput, Prisma.DocumentIndexUncheckedUpdateInput>
  /**
   * Choose, which DocumentIndex to update.
   */
  where: Prisma.DocumentIndexWhereUniqueInput
}

/**
 * DocumentIndex updateMany
 */
export type DocumentIndexUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DocumentIndices.
   */
  data: Prisma.XOR<Prisma.DocumentIndexUpdateManyMutationInput, Prisma.DocumentIndexUncheckedUpdateManyInput>
  /**
   * Filter which DocumentIndices to update
   */
  where?: Prisma.DocumentIndexWhereInput
  /**
   * Limit how many DocumentIndices to update.
   */
  limit?: number
}

/**
 * DocumentIndex updateManyAndReturn
 */
export type DocumentIndexUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * The data used to update DocumentIndices.
   */
  data: Prisma.XOR<Prisma.DocumentIndexUpdateManyMutationInput, Prisma.DocumentIndexUncheckedUpdateManyInput>
  /**
   * Filter which DocumentIndices to update
   */
  where?: Prisma.DocumentIndexWhereInput
  /**
   * Limit how many DocumentIndices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DocumentIndex delete
 */
export type DocumentIndexDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
  /**
   * Filter which DocumentIndex to delete.
   */
  where: Prisma.DocumentIndexWhereUniqueInput
}

/**
 * DocumentIndex deleteMany
 */
export type DocumentIndexDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DocumentIndices to delete
   */
  where?: Prisma.DocumentIndexWhereInput
  /**
   * Limit how many DocumentIndices to delete.
   */
  limit?: number
}

/**
 * DocumentIndex without action
 */
export type DocumentIndexDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentIndex
   */
  select?: Prisma.DocumentIndexSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DocumentIndex
   */
  omit?: Prisma.DocumentIndexOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentIndexInclude<ExtArgs> | null
}
